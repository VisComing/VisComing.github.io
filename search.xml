<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>C++ STL 简介</title>
    <url>/2020/09/12/c++%20stl%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="C-STL-简介"><a href="#C-STL-简介" class="headerlink" title="C++ STL 简介"></a>C++ STL 简介</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><a id="more"></a>
<h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p><code>#include &lt;vector&gt;</code></p>
<p><code>using std::vector</code></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>vector&lt;int&gt;  a</code>//初始化一个空vector</p>
<p><code>vector&lt;int&gt; a(10, 3)</code>/10个int型元素，它们的值均为3</p>
<p><code>vector&lt;int&gt; a(10)</code>//10个int型元素，执行类的默认初始化，这里10个元素均被初始化为0</p>
<p><code>vector&lt;int&gt; b = a</code>//b中包含a中所有元素的副本</p>
<p><code>vector&lt;int&gt; b(a)</code>//同上</p>
<p><code>vector&lt;int&gt; a&#123;1,2,3,4&#125;</code>//列表初始化，</p>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="a-push-back-x"><a href="#a-push-back-x" class="headerlink" title="a.push_back(x)"></a>a.push_back(x)</h4><p>向a末尾插入元素x</p>
<h4 id="a-empty"><a href="#a-empty" class="headerlink" title="a.empty()"></a>a.empty()</h4><p>判断a是否为空，空则返回true</p>
<h4 id="a-size"><a href="#a-size" class="headerlink" title="a.size()"></a>a.size()</h4><p>返回a中元素的个数</p>
<h4 id="a-n"><a href="#a-n" class="headerlink" title="a[n]"></a>a[n]</h4><p>支持随机寻址，返回a中第n个元素的引用，相当于对数组的操作</p>
<h4 id="a-b-a-b"><a href="#a-b-a-b" class="headerlink" title="a==b    a!=b"></a>a==b    a!=b</h4><p>判断a和b是否相等（当且仅当它们的元素数量相同且相同位置的元素值都相同）</p>
<h4 id="lt-lt-gt-gt"><a href="#lt-lt-gt-gt" class="headerlink" title="&lt;    &lt;=    &gt;    &gt;="></a>&lt;    &lt;=    &gt;    &gt;=</h4><p>按照字典序比较两个vector</p>
<h4 id="a-clear"><a href="#a-clear" class="headerlink" title="a.clear()"></a>a.clear()</h4><p>删除a中所有的元素</p>
<h4 id="a-front-a-back"><a href="#a-front-a-back" class="headerlink" title="a.front()    a.back()"></a>a.front()    a.back()</h4><p>返回a中的第一个数 返回a中的最后一个数</p>
<h4 id="a-begin-a-end"><a href="#a-begin-a-end" class="headerlink" title="a.begin()    a.end()"></a>a.begin()    a.end()</h4><p>指向a中的第一个元素，指向a中最后一个元素的下一个位置</p>
<h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i ++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//使用下标来遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = a.begin(); it != a.end(); it ++) <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//使用迭代器来遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:a) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//范围遍历</span></span><br></pre></td></tr></table></figure>

<h3 id="vector的增长"><a href="#vector的增长" class="headerlink" title="vector的增长"></a>vector的增长</h3><p>vector可以理解为动态数组，为了减少分配空间的次数，vector大概是在每次需要分配新的内存空间时讲当前容量翻倍</p>
<blockquote>
<p>使用vector时不建议先指定好vector的大小，而是应该先创建一个空的vector对象，然后在运行时利用push_back向其中添加元素。</p>
</blockquote>
<h3 id="二维vector"><a href="#二维vector" class="headerlink" title="二维vector"></a>二维vector</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) &#123;<span class="comment">//将二维数组array的元素插入到二维vector中</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">		temp.push_back(<span class="built_in">array</span>[m][n]);</span><br><span class="line">	&#125;</span><br><span class="line">	a.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历二维vector</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it = a.begin(); it != a.end(); it ++) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator t = (*it).begin(); t != (*it).end(); t ++) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; *t &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><p><code>#include &lt;string&gt;</code></p>
<p><code>using std::string</code></p>
<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><p><code>string s</code>//默认初始化，s是一个空字符串</p>
<p><code>string s = &quot;nihaoya&quot;</code>//拷贝初始化，s是该字符串字面值的副本</p>
<p><code>string s(&quot;nihaoya&quot;)</code>//直接初始化</p>
<p><code>string s(10,&#39;c&#39;)</code>//s包含10个重复的c</p>
<h3 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="s-size"><a href="#s-size" class="headerlink" title="s.size()"></a>s.size()</h4><p>返回s中字符的个数</p>
<h4 id="s-empty"><a href="#s-empty" class="headerlink" title="s.empty()"></a>s.empty()</h4><p>判断s是否为空，空则返回true</p>
<h4 id="s-clear"><a href="#s-clear" class="headerlink" title="s.clear()"></a>s.clear()</h4><p>删除字符串的所有字符</p>
<h4 id="s-n"><a href="#s-n" class="headerlink" title="s[n]"></a>s[n]</h4><p>string支持随机访问</p>
<h4 id><a href="#" class="headerlink" title="+"></a>+</h4><p>在字符串末尾追加字符串，注意必须确保每个加号的两侧的运算对象至少有一个是string</p>
<h4 id="s-substr-pos-n"><a href="#s-substr-pos-n" class="headerlink" title="s.substr(pos, n)"></a>s.substr(pos, n)</h4><p>返回从s字符串的pos位置（从0开始）开始的向后n个字符的字符串，如果不写第二个参数，则默认返回从pos位置开始到最后一个字符的字符串</p>
<h4 id="s-c-str"><a href="#s-c-str" class="headerlink" title="s.c_str()"></a>s.c_str()</h4><p>该函数返回一个const char*，指向以空值结尾的字符串（即c风格的字符串）。当你想要将一个string对象传递给需要c风格字符串的函数的时候，就可以使用该函数</p>
<h4 id="stoi-s"><a href="#stoi-s" class="headerlink" title="stoi(s)"></a>stoi(s)</h4><p>将字符串转换为int型，stoi()会做范围检查，默认范围是在int的范围内的，如果超出范围的话则会出现runtime error</p>
<h4 id="to-string-val"><a href="#to-string-val" class="headerlink" title="to_string(val)"></a>to_string(val)</h4><p>将数字转化成字符串</p>
<h3 id="遍历方式-1"><a href="#遍历方式-1" class="headerlink" title="遍历方式"></a>遍历方式</h3><p><code>for(int i = 0; i &lt; s.size(); i ++) cout &lt;&lt; s[i] &lt;&lt; &#39; &#39;; </code></p>
<p><code>for(string::iterator it = s.begin(); it != s.end(); i ++) cout &lt;&lt; *it &lt;&lt; endl;</code></p>
<p><code>for(auto c:s) cout &lt;&lt; c &lt;&lt; &#39; &#39;;</code></p>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><p><code>#include&lt;vector&gt;</code></p>
<p><code>using std::vector</code></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>queue&lt;int&gt; q</code></p>
<h3 id="常用操作-2"><a href="#常用操作-2" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="q-front"><a href="#q-front" class="headerlink" title="q.front()"></a>q.front()</h4><p>返回队列第一个元素的引用</p>
<h4 id="q-back"><a href="#q-back" class="headerlink" title="q.back()"></a>q.back()</h4><p>返回队列的最后一个元素的引用</p>
<h4 id="q-push-i"><a href="#q-push-i" class="headerlink" title="q.push(i)"></a>q.push(i)</h4><p>向队尾添加元素</p>
<h4 id="q-pop"><a href="#q-pop" class="headerlink" title="q.pop()"></a>q.pop()</h4><p>删除队列中第一个元素</p>
<h4 id="q-size"><a href="#q-size" class="headerlink" title="q.size()"></a>q.size()</h4><p>返回队列元素的个数</p>
<h4 id="q-empty"><a href="#q-empty" class="headerlink" title="q.empty()"></a>q.empty()</h4><p>判断队列是否为空，如果为空，则返回true</p>
<h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p>优先队列，底层是用堆实现的</p>
<h3 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h3><p><code>#include &lt;queue&gt;</code></p>
<p><code>using std::queue</code></p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><code>priority_queue&lt;int&gt; p</code>//默认是大根堆</p>
<p><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;)</code>//小根堆</p>
<h3 id="常用操作-3"><a href="#常用操作-3" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="p-push"><a href="#p-push" class="headerlink" title="p.push()"></a>p.push()</h4><p>向堆中插入一个元素</p>
<h4 id="p-top"><a href="#p-top" class="headerlink" title="p.top()"></a>p.top()</h4><p>返回堆顶元素</p>
<h4 id="p-pop"><a href="#p-pop" class="headerlink" title="p.pop()"></a>p.pop()</h4><p>弹出堆顶元素</p>
<h4 id="p-empty"><a href="#p-empty" class="headerlink" title="p.empty()"></a>p.empty()</h4><p>判断优先队列是否为空，空则返回true</p>
<h4 id="p-size"><a href="#p-size" class="headerlink" title="p.size()"></a>p.size()</h4><p>返回优先队列中元素的个数</p>
<h4 id="p-push-i"><a href="#p-push-i" class="headerlink" title="p.push(i)"></a>p.push(i)</h4><p>向堆中插入一个元素</p>
<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h3 id="头文件-4"><a href="#头文件-4" class="headerlink" title="头文件"></a>头文件</h3><p><code>#include &lt;stack&gt;</code></p>
<p><code>using std::stack</code></p>
<h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><code>stack&lt;int&gt; s</code></p>
<h3 id="常用操作-4"><a href="#常用操作-4" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="s-push-i"><a href="#s-push-i" class="headerlink" title="s.push(i)"></a>s.push(i)</h4><p>向栈顶插入一个元素</p>
<h4 id="s-pop"><a href="#s-pop" class="headerlink" title="s.pop()"></a>s.pop()</h4><p>弹出栈顶元素</p>
<h4 id="s-top"><a href="#s-top" class="headerlink" title="s.top()"></a>s.top()</h4><p>返回栈顶元素</p>
<h4 id="s-empty-1"><a href="#s-empty-1" class="headerlink" title="s.empty()"></a>s.empty()</h4><p>判断栈是否为空，空则返回true</p>
<h4 id="s-size-1"><a href="#s-size-1" class="headerlink" title="s.size()"></a>s.size()</h4><p>返回栈中元素的个数</p>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>双端队列</p>
<h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>deque<int> d;</int></p>
<h3 id="常用操作-5"><a href="#常用操作-5" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="d-size"><a href="#d-size" class="headerlink" title="d.size()"></a>d.size()</h4><p>返回双端队列的大小</p>
<h4 id="d-empty"><a href="#d-empty" class="headerlink" title="d.empty()"></a>d.empty()</h4><p>判断双端队列是否为空</p>
<h4 id="d-clear"><a href="#d-clear" class="headerlink" title="d.clear()"></a>d.clear()</h4><p>删除双端队列的所有元素</p>
<h4 id="d-front-d-back"><a href="#d-front-d-back" class="headerlink" title="d.front()/d.back()"></a>d.front()/d.back()</h4><p>返回双端队列的队头/队尾元素</p>
<h4 id="d-push-back-d-pop-back"><a href="#d-push-back-d-pop-back" class="headerlink" title="d.push_back/d.pop_back()"></a>d.push_back/d.pop_back()</h4><p>插入队尾/弹出队尾元素</p>
<h4 id="d-push-front-d-pop-front"><a href="#d-push-front-d-pop-front" class="headerlink" title="d.push_front()/d.pop_front()"></a>d.push_front()/d.pop_front()</h4><p>插入队首/弹出队首元素</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="[]"></a>[]</h4><p>支持随机访问</p>
<h2 id="set-multiset"><a href="#set-multiset" class="headerlink" title="set/multiset"></a>set/multiset</h2><p>set是一个内部自动有序且不含重复元素的容器 ,multiset可以含重复元素</p>
<h3 id="常用操作-6"><a href="#常用操作-6" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="begin-end-size-empty"><a href="#begin-end-size-empty" class="headerlink" title="begin()    end()    size()    empty()"></a>begin()    end()    size()    empty()</h4><h4 id="s-insert-x"><a href="#s-insert-x" class="headerlink" title="s.insert(x)"></a>s.insert(x)</h4><p>将x插入set容器中，并且自动递增排序和去重，时间复杂度为logn</p>
<h4 id="s-find-x"><a href="#s-find-x" class="headerlink" title="s.find(x)"></a>s.find(x)</h4><p>返回set中对应值为x的迭代器，时间复杂度为logn，如果找不到，则返回end迭代器</p>
<h4 id="s-count-x"><a href="#s-count-x" class="headerlink" title="s.count(x)"></a>s.count(x)</h4><p>返回值为x数的个数</p>
<h4 id="s-erase"><a href="#s-erase" class="headerlink" title="s.erase()"></a>s.erase()</h4><p>输入是一个数x，删除所有x，时间复杂度为</p>
<p>输入一个迭代器，则删除该迭代器</p>
<h4 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound()/upper_bound"></a>lower_bound()/upper_bound</h4><p>lower_bound(x) 返回大于等于x的最小的数的迭代器</p>
<p>upper_bound(x)返回大于x的最小的数的迭代器</p>
<h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><h3 id="头文件-5"><a href="#头文件-5" class="headerlink" title="头文件"></a>头文件</h3><p><code>#include &lt;utility&gt;</code></p>
<h3 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h3><p><code>pair&lt;string, int&gt; p</code>;</p>
<p><code>pair&lt;string, int&gt; p(&quot;zrf&quot;, 1)</code></p>
<p><code>pair&lt;string, int&gt; p = &#123;&quot;zrf&quot;, 1&#125;</code></p>
<p><code>pair&lt;string, int&gt; p = make_pair(&quot;zrf&quot;, 1)</code></p>
<h3 id="常用操作-7"><a href="#常用操作-7" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="p-first"><a href="#p-first" class="headerlink" title="p.first"></a>p.first</h4><p>返回p的第一个数据成员</p>
<h4 id="p-second"><a href="#p-second" class="headerlink" title="p.second"></a>p.second</h4><p>返回p的第二个数据成员</p>
<h4 id="make-pair-v1-v2"><a href="#make-pair-v1-v2" class="headerlink" title="make_pair(v1, v2)"></a>make_pair(v1, v2)</h4><p>返回一个用v1，v2初始化的pair</p>
<h4 id="p1-p2-p1-p2"><a href="#p1-p2-p1-p2" class="headerlink" title="p1 == p2    p1 != p2"></a>p1 == p2    p1 != p2</h4><p>当first和second成员分别相等时，两个pair相等</p>
<h2 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h2><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>插入的数是一个pair</p>
<h4 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h4><p>c.erase(k)    从c中删除每个关键字为k的元素。返回一个size_type值，指出删除的元素的数量</p>
<p>c.erase(p)    从c中删除迭代器p指定的元素。p不能指向尾后迭代器，返回一个指向p之后元素的迭代器</p>
<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>返回一个迭代器，指向第一个关键字为k的元素，若k不在容器中，则返回尾后迭代器</p>
<h4 id="count-k"><a href="#count-k" class="headerlink" title="count(k)"></a>count(k)</h4><p>返回关键字等于k的元素的数量</p>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>删除map中所有的元素</p>
<h4 id="size-empty"><a href="#size-empty" class="headerlink" title="size()    empty()"></a>size()    empty()</h4><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>可以像数组一样使用，时间复杂度是O(logn)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map&lt;string,int&gt; m;</span><br><span class="line">m[&quot;zrf&quot;] &#x3D; 1;&#x2F;&#x2F;插入</span><br></pre></td></tr></table></figure>

<h4 id="lower-bound-k-upper-bound-k"><a href="#lower-bound-k-upper-bound-k" class="headerlink" title="lower_bound(k)/upper_bound(k)"></a>lower_bound(k)/upper_bound(k)</h4><p>返回一个迭代器，指向第一个关键字大于等于/大于k的元素</p>
<h2 id="unorder-set-unorder-multiset-unorder-map-unorder-multimap"><a href="#unorder-set-unorder-multiset-unorder-map-unorder-multimap" class="headerlink" title="unorder_set    unorder_multiset    unorder_map    unorder_multimap"></a>unorder_set    unorder_multiset    unorder_map    unorder_multimap</h2><p>优点：增删改查时间复杂度是O(1)</p>
<p>缺点：不支持lower_bound()    upper_bound()</p>
]]></content>
  </entry>
  <entry>
    <title>kmp</title>
    <url>/2020/09/15/kmp/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>, M = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line"><span class="keyword">char</span> n[N], p[M];<span class="comment">//n是字符串，p是模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求next过程，字符串下标从1开始</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j =<span class="number">0</span>; i &lt;= <span class="keyword">sizeof</span>(p); i ++ ) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span>(p[i] == p[j + <span class="number">1</span>]) j ++;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配过程,字符串下标从1开始</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= <span class="keyword">sizeof</span>(n); i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span>(s[i] == p[j + <span class="number">1</span>]) j ++;</span><br><span class="line">    <span class="keyword">if</span>(j == <span class="keyword">sizeof</span>(n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//匹配成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>picture-test</title>
    <url>/2020/11/10/picture-test/</url>
    <content><![CDATA[<p><img src="/2020/11/10/picture-test/1.png" alt="测试图片"></p>
]]></content>
  </entry>
  <entry>
    <title>Python程序设计作业#1</title>
    <url>/2020/11/10/py1-2018211308-2018211430-%E5%91%A8%E7%91%9E%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Python程序设计作业-1"><a href="#Python程序设计作业-1" class="headerlink" title="Python程序设计作业#1"></a>Python程序设计作业#1</h1><p>提交邮箱：<a href="mailto:&#x62;&#117;&#x70;&#116;&#x6e;&#101;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#x62;&#117;&#x70;&#116;&#x6e;&#101;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;</a></p>
<p>邮件标题：py1-班级-学号-姓名</p>
<p>邮件附件：py1-班级-学号-姓名.md（即本文件）</p>
<p>截止时间：2020年10月26日23:59:59</p>
<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>使用asyncio的streams（coroutine based API）实现SOCKS5服务器。</p>
<p>协议参考：RFC 1928 - SOCKS Protocol Verison 5</p>
<p>只需要实现CMD X‘01’（即CONNECT）</p>
<p>只需要实现METHOD X‘00’（即NO AUTHENTICATION REQUIRED）</p>
<h2 id="作业内容"><a href="#作业内容" class="headerlink" title="作业内容"></a>作业内容</h2><p>程序源代码嵌入下方的code block中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="keyword">import</span> nest_asyncio</span><br><span class="line">nest_asyncio.apply()</span><br><span class="line">VERSION = <span class="number">5</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">reader, writer</span>):</span></span><br><span class="line">    addr_from = writer.get_extra_info(<span class="string">&#x27;peername&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">f&#x27;connect from<span class="subst">&#123;addr_from&#125;</span>&#x27;</span>)</span><br><span class="line">    header = <span class="keyword">await</span> reader.read(<span class="number">2</span>)</span><br><span class="line">    ver, num_method = struct.unpack(<span class="string">&quot;!BB&quot;</span>, header)</span><br><span class="line">    logging.info(<span class="string">f&#x27;ver == VERSION:<span class="subst">&#123;ver == VERSION&#125;</span>&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">&#x27;num_method = %d&#x27;</span> % num_method)</span><br><span class="line">    methods = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_method):</span><br><span class="line">        methods.append(ord(<span class="keyword">await</span> reader.read(<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> methods:<span class="comment">#无需认证</span></span><br><span class="line">        writer.close()</span><br><span class="line">        writer.wait_closed()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#回应一个数据包，包括协议版本号，指定认证方法</span></span><br><span class="line">    writer.write(struct.pack(<span class="string">&quot;!BB&quot;</span>, VERSION, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    request = <span class="keyword">await</span> reader.read(<span class="number">4</span>)</span><br><span class="line">    ver, cmd, rsv, atype = struct.unpack(<span class="string">&quot;!BBBB&quot;</span>, request)</span><br><span class="line">    <span class="keyword">assert</span> ver == VERSION</span><br><span class="line">    <span class="comment">#ipv4</span></span><br><span class="line">    <span class="keyword">if</span> atype == <span class="number">1</span>:</span><br><span class="line">        address = socket.inet_ntoa(<span class="keyword">await</span> reader.read(<span class="number">4</span>))</span><br><span class="line">    <span class="comment">#域名</span></span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="number">3</span>:</span><br><span class="line">        domain_length = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">        address = <span class="keyword">await</span> reader.read(domain_length[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#ipv6</span></span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="number">4</span>:</span><br><span class="line">        address = socket.inet_ntop(socket.AF_INET6, <span class="keyword">await</span> reader.read(<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer.close()</span><br><span class="line">        writer.wait_closed()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    port = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, <span class="keyword">await</span> reader.read(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="number">1</span>:</span><br><span class="line">            reader_remote,writer_remote = <span class="keyword">await</span> asyncio.open_connection(address,port[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            writer.close()</span><br><span class="line">            writer.wait_closed()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        logging.error(error)</span><br><span class="line">    reply = struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, VERSION, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    writer.write(reply)</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#第一个字节为0表示成功代理</span></span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="number">1</span> <span class="keyword">and</span> reply[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        tasks = [read_trans(reader, writer_remote), write_trans(reader_remote, writer)]</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_trans</span>(<span class="params">reader, writer_remote</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer_remote.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer_remote.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">write_trans</span>(<span class="params">reader_remote, writer</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader_remote.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    server = <span class="keyword">await</span> asyncio.start_server(handle, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10086</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> server:</span><br><span class="line">        <span class="keyword">await</span> server.serve_forever()</span><br><span class="line">        </span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h2 id="代码说明（可选）"><a href="#代码说明（可选）" class="headerlink" title="代码说明（可选）"></a>代码说明（可选）</h2><p>源代码中不要出现大段的说明注释，如果需要可以可以在本节中加上说明。</p>
]]></content>
  </entry>
  <entry>
    <title>Python程序设计作业#2</title>
    <url>/2020/11/10/py2-2018211308-2018211430-%E5%91%A8%E7%91%9E%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Python程序设计-2作业"><a href="#Python程序设计-2作业" class="headerlink" title="Python程序设计#2作业"></a>Python程序设计#2作业</h1><p>截止时间：2020年11月02日23:59:59</p>
<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>实现localProxy双协议（SOCKS5和HTTP tunnel）本地代理。</p>
<p>支持（SOCKS5代理）基于#1作业的成果。</p>
<p>支持HTTP tunnel（ 即HTTP CONNECT method）可用于HTTPS代理。</p>
<p>关于HTTP tunnel可以参见：<a href="https://www.zhihu.com/question/21955083">https://www.zhihu.com/question/21955083</a></p>
<h2 id="作业内容"><a href="#作业内容" class="headerlink" title="作业内容"></a>作业内容</h2><p>程序源代码嵌入下方的code block中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="keyword">import</span> nest_asyncio</span><br><span class="line">nest_asyncio.apply()</span><br><span class="line">VERSION = <span class="number">5</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">socks5</span>(<span class="params">first, reader, writer</span>):</span></span><br><span class="line">    addr_from = writer.get_extra_info(<span class="string">&#x27;peername&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">f&#x27;connect from<span class="subst">&#123;addr_from&#125;</span>&#x27;</span>)</span><br><span class="line">    header = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">    header = first + header</span><br><span class="line">    ver, num_method = struct.unpack(<span class="string">&quot;!BB&quot;</span>, header)</span><br><span class="line">    logging.info(<span class="string">f&#x27;ver == VERSION:<span class="subst">&#123;ver == VERSION&#125;</span>&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">&#x27;num_method = %d&#x27;</span> % num_method)</span><br><span class="line">    methods = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_method):</span><br><span class="line">        methods.append(ord(<span class="keyword">await</span> reader.read(<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> methods:<span class="comment">#无需认证</span></span><br><span class="line">        writer.close()</span><br><span class="line">        writer.wait_closed()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#回应一个数据包，包括协议版本号，指定认证方法</span></span><br><span class="line">    writer.write(struct.pack(<span class="string">&quot;!BB&quot;</span>, VERSION, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    request = <span class="keyword">await</span> reader.read(<span class="number">4</span>)</span><br><span class="line">    ver, cmd, rsv, atype = struct.unpack(<span class="string">&quot;!BBBB&quot;</span>, request)</span><br><span class="line">    <span class="keyword">assert</span> ver == VERSION</span><br><span class="line">    <span class="comment">#ipv4</span></span><br><span class="line">    <span class="keyword">if</span> atype == <span class="number">1</span>:</span><br><span class="line">        address = socket.inet_ntoa(<span class="keyword">await</span> reader.read(<span class="number">4</span>))</span><br><span class="line">    <span class="comment">#域名</span></span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="number">3</span>:</span><br><span class="line">        domain_length = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">        address = <span class="keyword">await</span> reader.read(domain_length[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#ipv6</span></span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="number">4</span>:</span><br><span class="line">        address = socket.inet_ntop(socket.AF_INET6, <span class="keyword">await</span> reader.read(<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer.close()</span><br><span class="line">        writer.wait_closed()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    port = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, <span class="keyword">await</span> reader.read(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="number">1</span>:</span><br><span class="line">            reader_remote,writer_remote = <span class="keyword">await</span> asyncio.open_connection(address,port[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            writer.close()</span><br><span class="line">            writer.wait_closed()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        logging.error(error)</span><br><span class="line">    reply = struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, VERSION, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    writer.write(reply)</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#第一个字节为0表示成功代理</span></span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="number">1</span> <span class="keyword">and</span> reply[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        tasks = [read_trans(reader, writer_remote), write_trans(reader_remote, writer)]</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_trans</span>(<span class="params">reader, writer_remote</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer_remote.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer_remote.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">write_trans</span>(<span class="params">reader_remote, writer</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader_remote.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">httptunnel</span>(<span class="params">first, reader, writer</span>):</span></span><br><span class="line">    http_connect = (<span class="keyword">await</span> reader.read(<span class="number">1024</span>))</span><br><span class="line">    http_connect = (first + http_connect).decode()</span><br><span class="line"></span><br><span class="line">    logging.info(http_connect)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(http_connect[i] != <span class="string">&#x27;:&#x27;</span>): </span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    domain_name = http_connect[<span class="number">8</span> : i]</span><br><span class="line">    j = i</span><br><span class="line">    <span class="keyword">while</span>(http_connect[j] != <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    port = http_connect[i + <span class="number">1</span> : j]</span><br><span class="line">    </span><br><span class="line">    logging.info(<span class="string">&#x27;domain_name:%s &#x27;</span> % domain_name)</span><br><span class="line">    logging.info(<span class="string">&#x27;port:%s&#x27;</span> % port)</span><br><span class="line">    reply = <span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span></span><br><span class="line">    writer.write(reply.encode())</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    reader_remote,writer_remote = <span class="keyword">await</span> asyncio.open_connection(domain_name,port)</span><br><span class="line">    tasks = [read_trans(reader, writer_remote), write_trans(reader_remote, writer)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">reader, writer</span>):</span></span><br><span class="line">    first = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(first == <span class="string">b&#x27;\x05&#x27;</span>):</span><br><span class="line">        <span class="keyword">await</span> socks5(first, reader, writer)</span><br><span class="line">    <span class="keyword">elif</span>(first == <span class="string">b&#x27;C&#x27;</span>):</span><br><span class="line">        <span class="keyword">await</span> httptunnel(first, reader, writer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    server = <span class="keyword">await</span> asyncio.start_server(test, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10086</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> server:</span><br><span class="line">        <span class="keyword">await</span> server.serve_forever()</span><br><span class="line">        </span><br><span class="line">asyncio.run(main())</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="代码说明（可选）"><a href="#代码说明（可选）" class="headerlink" title="代码说明（可选）"></a>代码说明（可选）</h2><p>源代码中不要出现大段的说明注释，如果需要可以可以在本节中加上说明。</p>
]]></content>
  </entry>
  <entry>
    <title>Python程序设计作业#3</title>
    <url>/2020/11/10/py3-2018211308-2018211430-%E5%91%A8%E7%91%9E%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Python程序设计-3作业"><a href="#Python程序设计-3作业" class="headerlink" title="Python程序设计#3作业"></a>Python程序设计#3作业</h1><p>截止时间：2020年11月09日23:59:59</p>
<h2 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h2><p>实现localProxy和remoteProxy分离式代理。</p>
<p>支持SOCKS5代理和HTTPS代理（基于#2作业的成果）。</p>
<p>localProxy收到的每个TCP连接单独建立代理TCP连接。</p>
<h2 id="作业内容"><a href="#作业内容" class="headerlink" title="作业内容"></a>作业内容</h2><p>程序源代码嵌入下方的code block中。</p>
<p>local proxy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="keyword">import</span> nest_asyncio</span><br><span class="line">nest_asyncio.apply()</span><br><span class="line">VERSION = <span class="number">5</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">socks5</span>(<span class="params">first, reader, writer</span>):</span></span><br><span class="line">    addr_from = writer.get_extra_info(<span class="string">&#x27;peername&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">f&#x27;connect from<span class="subst">&#123;addr_from&#125;</span>&#x27;</span>)</span><br><span class="line">    header = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">    header = first + header</span><br><span class="line">    ver, num_method = struct.unpack(<span class="string">&quot;!BB&quot;</span>, header)</span><br><span class="line">    logging.info(<span class="string">f&#x27;ver == VERSION:<span class="subst">&#123;ver == VERSION&#125;</span>&#x27;</span>)</span><br><span class="line">    logging.info(<span class="string">&#x27;num_method = %d&#x27;</span> % num_method)</span><br><span class="line">    methods = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_method):</span><br><span class="line">        methods.append(ord(<span class="keyword">await</span> reader.read(<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> methods:<span class="comment">#无需认证</span></span><br><span class="line">        writer.close()</span><br><span class="line">        writer.wait_closed()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#回应一个数据包，包括协议版本号，指定认证方法</span></span><br><span class="line">    writer.write(struct.pack(<span class="string">&quot;!BB&quot;</span>, VERSION, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    request = <span class="keyword">await</span> reader.read(<span class="number">4</span>)</span><br><span class="line">    ver, cmd, rsv, atype = struct.unpack(<span class="string">&quot;!BBBB&quot;</span>, request)</span><br><span class="line">    <span class="keyword">assert</span> ver == VERSION</span><br><span class="line">    <span class="comment">#ipv4</span></span><br><span class="line">    <span class="keyword">if</span> atype == <span class="number">1</span>:</span><br><span class="line">        address = socket.inet_ntoa(<span class="keyword">await</span> reader.read(<span class="number">4</span>))</span><br><span class="line">    <span class="comment">#域名</span></span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="number">3</span>:</span><br><span class="line">        domain_length = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">        address = <span class="keyword">await</span> reader.read(domain_length[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#ipv6</span></span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="number">4</span>:</span><br><span class="line">        address = socket.inet_ntop(socket.AF_INET6, <span class="keyword">await</span> reader.read(<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        writer.close()</span><br><span class="line">        writer.wait_closed()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    port = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, <span class="keyword">await</span> reader.read(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="number">1</span>:</span><br><span class="line">            reader_remote,writer_remote = <span class="keyword">await</span> asyncio.open_connection(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10010</span>)</span><br><span class="line">            http_connect = <span class="string">&#x27;CONNECT &#x27;</span> + address.decode() + <span class="string">&#x27;:&#x27;</span> + str(port[<span class="number">0</span>]) + <span class="string">&#x27; HTTP/1.1&#x27;</span></span><br><span class="line">            print(<span class="string">&#x27;http_connect&#x27;</span>)</span><br><span class="line">            print(http_connect)</span><br><span class="line">            writer_remote.write(http_connect.encode())</span><br><span class="line">            <span class="keyword">await</span> writer_remote.drain()</span><br><span class="line">            reply = <span class="keyword">await</span> (reader_remote.read(<span class="number">1024</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            writer.close()</span><br><span class="line">            writer.wait_closed()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        logging.error(error)</span><br><span class="line">    reply = struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, VERSION, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    writer.write(reply)</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#第一个字节为0表示成功代理</span></span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="number">1</span> <span class="keyword">and</span> reply[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        tasks = [read_trans(reader, writer_remote), write_trans(reader_remote, writer)]</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_trans</span>(<span class="params">reader, writer_remote</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer_remote.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer_remote.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">write_trans</span>(<span class="params">reader_remote, writer</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader_remote.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">httptunnel</span>(<span class="params">first, reader, writer</span>):</span></span><br><span class="line">    http_connect = (<span class="keyword">await</span> reader.read(<span class="number">1024</span>))</span><br><span class="line">    http_connect = (first + http_connect).decode()</span><br><span class="line"></span><br><span class="line">    logging.info(http_connect)</span><br><span class="line"></span><br><span class="line">    reader_remote,writer_remote = <span class="keyword">await</span> asyncio.open_connection(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">10010</span>)</span><br><span class="line">    writer_remote.write(http_connect.encode())</span><br><span class="line">    <span class="keyword">await</span> writer_remote.drain()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    reply = <span class="keyword">await</span> (reader_remote.read(<span class="number">1024</span>))</span><br><span class="line">    writer.write(reply)</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    <span class="comment">#连接建立成功</span></span><br><span class="line">    tasks = [read_trans(reader, writer_remote), write_trans(reader_remote, writer)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">reader, writer</span>):</span></span><br><span class="line">    first = <span class="keyword">await</span> reader.read(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(first == <span class="string">b&#x27;\x05&#x27;</span>):</span><br><span class="line">        <span class="keyword">await</span> socks5(first, reader, writer)</span><br><span class="line">    <span class="keyword">elif</span>(first == <span class="string">b&#x27;C&#x27;</span>):</span><br><span class="line">        <span class="keyword">await</span> httptunnel(first, reader, writer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    server = <span class="keyword">await</span> asyncio.start_server(test, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10086</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> server:</span><br><span class="line">        <span class="keyword">await</span> server.serve_forever()</span><br><span class="line">        </span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>

<p>remote proxy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="keyword">import</span> nest_asyncio</span><br><span class="line">nest_asyncio.apply()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">reader_local, writer_local</span>):</span></span><br><span class="line">    http_connect = (<span class="keyword">await</span> reader_local.read(<span class="number">1024</span>))</span><br><span class="line">    http_connect = http_connect.decode()</span><br><span class="line">    logging.info(http_connect)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(http_connect[i] != <span class="string">&#x27;:&#x27;</span>): </span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    domain_name = http_connect[<span class="number">8</span> : i]</span><br><span class="line">    j = i</span><br><span class="line">    <span class="keyword">while</span>(http_connect[j] != <span class="string">&#x27; &#x27;</span>):</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    port = http_connect[i + <span class="number">1</span> : j]</span><br><span class="line"></span><br><span class="line">    reader_remote,writer_remote = <span class="keyword">await</span> asyncio.open_connection(domain_name,port)</span><br><span class="line"></span><br><span class="line">    reply = <span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;</span></span><br><span class="line">    writer_local.write(reply.encode())</span><br><span class="line">    <span class="keyword">await</span> writer_local.drain()</span><br><span class="line"></span><br><span class="line">    tasks = [read_trans(reader_local, writer_remote), write_trans(reader_remote, writer_local)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_trans</span>(<span class="params">reader, writer_remote</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer_remote.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer_remote.drain()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">write_trans</span>(<span class="params">reader_remote, writer</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = <span class="keyword">await</span> reader_remote.read(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            logging.info(<span class="string">&#x27;disconnect&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer.write(data)</span><br><span class="line">        <span class="keyword">await</span> writer.drain()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    server = <span class="keyword">await</span> asyncio.start_server(handle, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10010</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> server:</span><br><span class="line">        <span class="keyword">await</span> server.serve_forever()</span><br><span class="line">        </span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>





<h2 id="代码说明（可选）"><a href="#代码说明（可选）" class="headerlink" title="代码说明（可选）"></a>代码说明（可选）</h2><p>源代码中不要出现大段的说明注释，如果需要可以可以在本节中加上说明。</p>
]]></content>
  </entry>
  <entry>
    <title>常用shell命令</title>
    <url>/2020/09/13/shell/</url>
    <content><![CDATA[<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>会显示当前的时间</p>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>回显，</p>
<p><code>$echo hello</code></p>
<p><code>hello</code></p>
<p>如果想要显示多个单词怎么办呢</p>
<p><code>$echo “hello wordl”</code></p>
<p>用引号即可</p>
<p><code>$echo hello\ world</code></p>
<h3 id="echo-PATH"><a href="#echo-PATH" class="headerlink" title="echo $PATH"></a>echo $PATH</h3><p>显示出命令执行的路径。shell是一个编程环境，就像python一样。那么shell在执行echo或者date程序时，它就要找到程序的位置，就会询问环境变量，包含在$PATH中</p>
<h3 id="which-echo"><a href="#which-echo" class="headerlink" title="which echo"></a>which echo</h3><p>显示执行echo命令的路径</p>
<h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>print working directory打印当前工作路径</p>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>change directory 改变工作路径</p>
<h3 id><a href="#" class="headerlink" title="."></a>.</h3><p>当前路径</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=".."></a>..</h3><p>当前路径的父目录</p>
<p>绝对路径，相对路径</p>
<h3 id="-2"><a href="#-2" class="headerlink" title="~"></a>~</h3><p>回到用户目录</p>
<h3 id="-3"><a href="#-3" class="headerlink" title="-"></a>-</h3><p>回到上一个路径</p>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><p>drwxr-xr-x</p>
<p>第一个字母如果是d，表示是一个目录，如果是-，表示是一个文件</p>
<p>第一个字母表示文件类型</p>
<p>d:目录</p>
<p>-:普通文件</p>
<p>l:符号链接文件</p>
<p>b:块设备</p>
<p>c:字符设备</p>
<p>p:命令管道文件</p>
<p>s:套接字文件</p>
<p>接下来是三组，每组有三个字母</p>
<p>r:read读权限    w:write写权限    x:excute执行权限</p>
<p>也可以用数字表示r=4,w=2,x=1，把每一组的rwx对应的数字加起来，上面的即为755</p>
<p>第一组表示文件拥有者权限，第二组表示同组用户权限，最后一组表示其他用户权限（不包括root）</p>
<p>对于目录来说，为了进入目录，你需要有执行权限，为了列出目录的内容，你需要有读权限</p>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>将一个文件从一个路径移动并重命名到另一个路径下</p>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>将一个文件从一个路径拷贝并重命名到另一个路径下</p>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>移除一个文件</p>
<p>rm只能移除当个文件，如果你想移除目录，加上-r递归移除</p>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>移除一个空目录</p>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>创建一个目录，如果目录已存在，则会报错</p>
<p>如果想创建一个有空格的目录怎么办</p>
<p><code>$mkdir hello world</code></p>
<p>这样会创建两个目录</p>
<p><code>mkdir &quot;hello world&quot;</code></p>
<p>这样就可以了</p>
<h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>查看某个命令的手册，按q退出</p>
<p><code>$man ls</code></p>
<h2 id="ctrl-L"><a href="#ctrl-L" class="headerlink" title="ctrl L"></a>ctrl L</h2><p>清空控制台</p>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>打印文件的内容</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><code>$echo hello &gt; hello.txt</code></p>
<p>echo本来会将其输出写入到标准输出，默认情况下就是终端；使用&gt;将其输出重定向到hello.tex文件中，如果hello.txt文件不存在，则会新建一个hello.txt；如果存在hello.txt则会覆盖里面原有的内容。</p>
<p>使用&gt;&gt;将输出以追加方式重定向到hello.txt中</p>
<p>也有输入重定向</p>
<p><code>$cat &lt; hello.txt</code></p>
<p>将cat的输入重定向到hello.txt,输出为</p>
<p><code>hello</code></p>
<p><code>$cat &lt; hello.txt &gt; hello2.txt</code></p>
<p>将hello.txt中的内容拷贝到hello2.txt中</p>
<p>cat对重定向的过程一无所知</p>
<h2 id="-4"><a href="#-4" class="headerlink" title="|"></a>|</h2><p>管道，将|左边的输出作为右边的输入</p>
<p><code>$ls -l /</code></p>
<p>会输出/目录下的详细信息，如果我只想要最后一行信息怎么办呢</p>
<p><code>$tail -n1</code></p>
<p>可以输出最后一行</p>
<p><code>$ls -l / | tail -n1</code></p>
<p>左边的输出作为右边的输入，则会输出最后一行</p>
<p>ls和tail对彼此的存在毫不知情</p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>用于查找文件中符合条件的字符串，如果发现某文件含有指定的字符，则会把含有字符的这一行打印出来；如果不指定任何文件名称，或者给予的文件名是-，则grep命令会从标准输入设备读取数据</p>
<p><code>$curl --head www.baidu.com</code></p>
<p><img src="/2020/09/13/shell/Users\dell\AppData\Roaming\Typora\typora-user-images\image-20200913150417575.png" alt="image-20200913150417575"></p>
<p><code>curl --head www.baidu.com | grep -i content-length</code></p>
<p><img src="/2020/09/13/shell/Users\dell\AppData\Roaming\Typora\typora-user-images\image-20200913150514334.png" alt="image-20200913150514334"></p>
<h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><p>从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存到文件，</p>
<h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>change mode,修改用户对文件的权限</p>
<p>只有文件所有者和root用户可以修改权限</p>
<p>chmod mode file</p>
<p>mode：</p>
<p>[ugoa] [+-=] [rwx]</p>
<p>u表示该文件拥有者，g表示与该文件的拥有者属于同一个群组的用户，o表示其他用户，a表示所有用户</p>
<p>+表示增加权限，-表示取消权限，=表示唯一设定权限</p>
<p>r表示可读取，w表示可写入，x表示可执行</p>
<p><code>chomd u+x foo.bar</code></p>
<p><code>chmod ug+w, o-w foo.bar</code></p>
<p>此外chmod也可以用数字来表示权限</p>
<p><code>chmod 777 foo.bar</code></p>
]]></content>
  </entry>
  <entry>
    <title>test_my_blog</title>
    <url>/2020/09/12/test-my-blog/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数组模拟单链表</title>
    <url>/2020/09/13/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="数组模拟单链表"><a href="#数组模拟单链表" class="headerlink" title="数组模拟单链表"></a>数组模拟单链表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> e[N], ne[N], idx, head;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//往链表头部插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_head</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;<span class="comment">//首先将元素的值保存起来</span></span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在k位置的后面插入x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除k位置后面的x元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除头节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组模拟双链表"><a href="#数组模拟双链表" class="headerlink" title="数组模拟双链表"></a>数组模拟双链表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx, l[N], r[N], e[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    r[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_right</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    r[idx] = r[a];</span><br><span class="line">    l[idx] = a;</span><br><span class="line">    l[r[a]] = idx;</span><br><span class="line">    r[a] = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在a的左边插入一个数x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_left</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    insert_right(l[a], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点a</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组模拟栈、队列"><a href="#数组模拟栈、队列" class="headerlink" title="数组模拟栈、队列"></a>数组模拟栈、队列</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="comment">/************栈*************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tt表示栈顶</span></span><br><span class="line"><span class="keyword">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line">stk[++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line">tt --;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(tt &gt; <span class="number">0</span>) 不空</span><br><span class="line"><span class="keyword">else</span> 空</span><br><span class="line">    </span><br><span class="line"><span class="comment">//栈顶元素</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********队列***************/</span></span><br><span class="line"><span class="comment">//hh表示队头，tt表示队尾，在队尾插入元素，在队头弹出元素</span></span><br><span class="line"><span class="keyword">int</span> q[N], hh, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">q[++ tt] = x;</span><br><span class="line"><span class="comment">//弹出</span></span><br><span class="line">hh ++;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(hh &lt;= tt)非空</span><br><span class="line"><span class="keyword">else</span> 空</span><br><span class="line"><span class="comment">//取出队头元素</span></span><br><span class="line">q[hh];</span><br><span class="line"><span class="comment">//取出队尾元素</span></span><br><span class="line">q[tt];</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>tire树</title>
    <url>/2020/09/16/trie/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="comment">//son表示子节点，这里仅考虑26个小写字母。</span></span><br><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p  = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>2020-2021算法设计与分析期中考试参考答案</title>
    <url>/2020/11/10/%E7%AE%97%E6%B3%95%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<h1 id="2020-2021算法设计与分析期中考试参考答案"><a href="#2020-2021算法设计与分析期中考试参考答案" class="headerlink" title="2020-2021算法设计与分析期中考试参考答案"></a>2020-2021算法设计与分析期中考试参考答案</h1><h3 id="一、写出O，Θ，Ω的含义"><a href="#一、写出O，Θ，Ω的含义" class="headerlink" title="一、写出O，Θ，Ω的含义"></a>一、写出O，Θ，Ω的含义</h3><p>O(g(n)) = {f(n):  存在正常量c和n0，使得对所有n≥ n0，有0≤f(n)≤cg(n)}</p>
<p>Θ(g(n)) = {f(n):  存在正常量c1、c2和n0，使得对所有n≥ n0，有c1g(n)≤f(n)≤c2g(n)}</p>
<p>Ω(g(n)) = {f(n):  存在正常量c和n0，使得对所有n≥ n0，有f(n)≥cg(n)≥0}</p>
<h3 id="二、写出快速排序的Partition方法"><a href="#二、写出快速排序的Partition方法" class="headerlink" title="二、写出快速排序的Partition方法"></a>二、写出快速排序的Partition方法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = q[(l + r) &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(q[++i] &lt; x);</span><br><span class="line">        <span class="keyword">while</span>(q[--j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            <span class="built_in">std</span>::swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>附：快速排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//一、确定边界点，一般是左边界q[l]，中间值q[l + r &gt;&gt; 1]，右边界q[r]，或者随机取</span></span><br><span class="line">    <span class="keyword">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//二、调整区间，根据边界点的值x将整个区间分为两部分，使得左半边所有数均小于等于x，右半边所有数均大于等于x</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(q[++i] &lt; x);<span class="comment">//从左边开始，找出第一个大于等于x的数</span></span><br><span class="line">        <span class="keyword">while</span>(q[--j] &gt; x);<span class="comment">//从右边开始，找出第一个小于等于x的数</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            <span class="built_in">std</span>::swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三、递归处理左右两个区间</span></span><br><span class="line">    quick_sort(q, l, j);</span><br><span class="line">    quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    quick_sort(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、按照渐进阶从低到高的顺序排列以下表达式："><a href="#三、按照渐进阶从低到高的顺序排列以下表达式：" class="headerlink" title="三、按照渐进阶从低到高的顺序排列以下表达式："></a>三、按照渐进阶从低到高的顺序排列以下表达式：</h3><p>$$<br>4n^2, logn, 3^n, 20n, 2, n^{2/3}, n!<br>$$</p>
<p>答案：<br>$$<br>2, logn, n^{2/3}, 20n, 4n^2, 3^n, n!<br>$$</p>
<h3 id="四、逆序对"><a href="#四、逆序对" class="headerlink" title="四、逆序对"></a>四、逆序对</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//逆序对</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> q[N], temp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse_pair</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = reverse_pair(q, l, mid) + reverse_pair(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) temp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> temp[k++] = q[j++], res += mid - i + <span class="number">1</span>;<span class="comment">//仅此处与归并排序不同</span></span><br><span class="line">        <span class="comment">/*左边和右边均已排好序，如果q[i] &gt; q[j]，那么i~mid之间的数字都会大于q[j],所以</span></span><br><span class="line"><span class="comment">        *对于左边第i个数，右边有mid - i + 1个数小于q[i]，逆序对数量要加上mid - i + 1</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) temp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) temp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span>(i = l, k = <span class="number">0</span>; i &lt;= r; i++, k++) q[i] = temp[k];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    <span class="keyword">int</span> res = reverse_pair(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复杂度分析 T(n) = 2T(n / 2) + O(n)</p>
<p>由主定理得：T(n) = O(nlogn)</p>
<p>附：归并排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> q[N], temp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    merge_sort(q, l, mid);<span class="comment">//左边排序</span></span><br><span class="line">    merge_sort(q, mid + <span class="number">1</span>, r);<span class="comment">//右边排序</span></span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<span class="comment">//合并，依次比较左右两边的数，较小的填入temp数组中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) temp[k++] = q[i++];<span class="comment">//为了保证归并排序的稳定性，如果左右两边有相同的数，那么把左边的数先放入temp数组中</span></span><br><span class="line">        <span class="keyword">else</span> temp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];<span class="comment">//将左边剩余的数填入temp数组中</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) temp[k++] = q[j++];<span class="comment">//将右边剩余的数字填入temp数组中</span></span><br><span class="line">    <span class="keyword">for</span>(i = l, k = <span class="number">0</span>; i &lt;= r; i++, k++) q[i] = temp[k];<span class="comment">//将temp的数组移到原来的数组中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    merge_sort(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="五、摆花"><a href="#五、摆花" class="headerlink" title="五、摆花"></a>五、摆花</h3><p>设f[i][j]表示前i个<strong>花瓶</strong>里放了j朵花的最大价值，对于第i个花瓶，只有放与不放两种选择</p>
<p>状态转移方程：<br>$$<br>f[i][j] = max(f[i - 1][j], f[i - 1][j - 1] + w[j][i])<br>$$<br>时间复杂度O(mn)，假设价值均大于0</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> w[N][N], f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i][j]);</span><br><span class="line">    <span class="comment">//f[i][j]表示前i个花瓶里放前j束花的价值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">std</span>::min(m, i); j++)</span><br><span class="line">            f[i][j] = <span class="built_in">std</span>::max(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + w[j][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>算法笔记笔记</title>
    <url>/2020/09/12/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>1、用double, 不用 float, double的精度为15-16位， float 的精度为6-7位</p>
<p>2、c语言用字符数组保存字符串    字符串常量使用双引号标注的字符集合     char str[30] = “wo ai zhong guo”;</p>
<p>3、尽量不要使用宏定义（#define）定义除了定义常量之外的事情</p>
<p>4、i ++ 先使用i再将i加一        ++ i 先将i加一再使用i</p>
<p>5、条件运算符（?   :）三目运算符    A ? B : C     判断A， 如果为真，执行B，如果为假，执行C</p>
<p>6、int的上限为2的32次方减1            INT_MAX =（1 &lt;&lt; 31）- 1 = 2147483647    左移相当于乘法</p>
<p>7、^ 运算符 异或 相异为1， 相同为0</p>
<p>8、连续等号 m = n = 10      赋值m, n均为10</p>
<p>9、scanf(“%d:%d:%d”, &amp;hour, &amp;minute, &amp;second);                10:27:54    scanf中的双引号内容就是整个输入</p>
<p>​      scanf(“%d,%lf,%d”, &amp;a, &amp;b, &amp;c);                    输入数据：12,17.2,23</p>
<p>10、除%c之外，scanf对其他格式符的输入是以空白符（空格、Tab）为结束判断标志的</p>
<p>​        注意，scanf的%c格式是可以读入空格跟空行的</p>
<p>​                scanf(“%d%c%s”, &amp;a, &amp;ch, &amp; str);            输入：8 q nihao            结果： a = 8; ch =  ; str = q;</p>
<p>​        所以，读入字符时，最好用字符串的方式读入，比如读入一个字符，int st[2]; scanf(“%s”, st);//%s遇到空格就会停止读入</p>
<p>11、%.mf，让浮点数保留m位进行输出</p>
<p>12、getchar()用来输入单个字符， putchar用来输出单个字符</p>
<p>13、typedef 给数据类型起一个别名      如 ：typedef long long LL;</p>
<p>14、常用math函数</p>
<p>​                fabs(double x)  对double变量取绝对值</p>
<p>​                floor(double x) 对double变量向下取整            ceil(double x) double变量向上取整</p>
<p>​                double pow(double a, double b) 计算a的b次方，参数和返回值都是double</p>
<p>​                double sqrt(double x)  计算x的算术平方根， 参数和返回值均为double</p>
<p>​                double log(double x) 计算x以自然对数为底的对数</p>
<p>​                sin(double x)    cos(double x)    tan(double x)  参数和返回值都是double</p>
<p>15、每个case后，必须加上break，否则执行完该case后，不会break，会继续向下执行，执行下面的case</p>
<p>16、一维数组初始化 int a[10] = {0}; 注意 int a[10] = {1} 不会将数组全初始化为1！memset(a, 1, sizeof a) 依然不能将数组置为1，memset按字节对内存进行初始化，所以内存里存的其实是0x0101 0101……，也就是16843009。</p>
<p>17、建议只用memset置0或者-1.memset是按字节赋值</p>
<p>18、gets用来输入一行字符串，注意识别\n作为输入结束标志</p>
<p>19、字符数组以\0结尾，开字符数组的时候一定要至少比要存储的字符串长度多1，int数组则不需要多1</p>
<p>20、如果不是用scanf的%s或者gets输入字符串的，则务必要在字符串后加上\0</p>
<p>21、strlen, 注意返回类型是无符号整型（unsigned int），strlen(str) &lt; -1可能为真， 无符号数和有符号数比较大小时，会转换为无符号数比较</p>
<p>22、strcmp(字符串1， 字符串2) 按照字典序比较， 如果等于，返回0，如果大于，返回正整数，如果小于，返回负整数</p>
<p>23、strcpy(字符数组1， 字符数组2) ，把字符数组2赋给字符数组1</p>
<p>24、strcat(字符数组1， 字符数组2)，把字符数组2接在字符数组1后面</p>
<p>25、数组作为函数的参数，int func(int a[], int b[][5] [] [8]), 注意 二维数组的第二维需要填写个数</p>
<p>26、在函数中对数组修改就相当于对原数组修改</p>
<p>27、指针是一个unsigned类型的整数</p>
<p>28、浮点数的比较</p>
<p>​                const double esp = 1e-8</p>
<p>​                if(fabs(a - b) &lt; esp)  则可说明两个浮点数相等</p>
<p>29、const double pi = acos(-1.0)</p>
<p>30、while(scanf(“%d”, &amp;a) != EOF) 如果没有读到文件末尾，就继续读</p>
<p>31、while(gets(str) != NULL) 使用gets读取字符串时</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>1、简单模拟：不需要什么算法，题目怎么说，我就怎么做，就好像把题目翻译成了代码语言</p>
<p>2、闰年：if ((year % 4 == 0 &amp;&amp; year %100 != 0)  || (year % 400 == 0))</p>
<p>3、product ：乘积</p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>​    </p>
]]></content>
  </entry>
  <entry>
    <title>计算机基础知识</title>
    <url>/2020/09/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>字：计算机一次存取、加工、传送的数据长度称为字</p>
<p>字长：计算机每个字所包含的位数称为字长</p>
<h2 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h2><p>掩膜只读存储器（Mask ROM）：掉电后依然存在，可靠性高。缺点是信息只能一次写入（在制造的过程中），不灵活</p>
<p>可编程只读存储器（PROM）：允许用户通过专用的色号被一次性写入自己所需要的东西，一般只可编程一次</p>
<p>可编程可擦除只读存储器（EPROM）：可读可写，用紫外线或脉冲电流先将原有的信息擦除，然后重新写入</p>
<p>电可擦除可编程只读存储器（EEPROM）：随时可以写入而无需擦除原先内容</p>
<p>快擦除读写存储器（Flash）：闪存，广泛用于制作各种移动存储器，如U盘以及存储卡</p>
<p>严格意义上：机械硬盘不属于ROM</p>
<p>固态硬盘和U盘属于ROM</p>
<h2 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h2><p>SRAM：静态随机存储器，利用双稳态触发器来存储信息，即使信息被读出后，它仍保持其原状态而不需要再生（非破坏性读出）。SRAM存取速度快，但是集成度低，功耗大，价格昂贵（价格是DRAM的几十倍），一般用来组成高速缓冲存储器。</p>
<p>DRAM：动态随机存储器是利用存储元电路中的栅极电容上的电荷来存储信息的，电容上的电荷一般只能维持1-2ms，即使电源不断电，信息也会自动消失，因此每隔一段时间需要刷新。</p>
<p>打开任务管理器即可看到L1、L2、L3缓存</p>
<h2 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h2><p>HDD，数据通过离磁性表面很近的磁头由电磁流来改变极性的方式被写入到磁盘上</p>
<p>接口：一种是IDE，一种是SATA，现在大多数都是SATA</p>
<p>固态硬盘接口：市面上销售的大多是m.2接口和sata接口</p>
<h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><p>基本输入输出系统，预安装在个人电脑的主板上，是个人电脑启动时加载的第一个软件。现在，BIOS的作用是初始化和测试<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E9%AB%94">硬件</a>组件，以及从大容量存储设备（如硬盘）加载<a href="https://zh.wikipedia.org/wiki/%E5%95%9F%E5%8B%95%E7%A8%8B%E5%BC%8F">引导程序</a>，并由<a href="https://zh.wikipedia.org/wiki/%E5%95%9F%E5%8B%95%E7%A8%8B%E5%BC%8F">引导程序</a>加载操作系统。现在BIOS大多存储在flash芯片上。</p>
<p>以前BIOS存储在CMOS中，没电信息就会丢失。</p>
<p>CMOS中存储的内容掉电就会丢失，主板上通常有一块电池给CMOS供电。电脑关机后，过段时间再开机，发现时间依然是正确的，这就是这快电池在为时钟模块供电</p>
<h2 id="大端法-小端法"><a href="#大端法-小端法" class="headerlink" title="大端法/小端法"></a>大端法/小端法</h2><p>假设一个int型变量x的地址为0x100,那么x的4个字节将被存储在内存的0x100,0x101,0x102,0x103的位置。</p>
<p>字节序即为多字节对象在内存中的字节顺序</p>
<p>大端法：</p>
<p>最高有效字节在最前面的方式称为大端法，假设x的值为0x12345678。对于大端法的机器来说</p>
<p>0x100:12    0x101:34    0x102:56    0x103:78</p>
<p>小端法：</p>
<p>0x100:78    0x101:56    0x102:34    0x103:12</p>
<h2 id="括弧匹配"><a href="#括弧匹配" class="headerlink" title="括弧匹配"></a>括弧匹配</h2><p>1、任意前缀中，左括号数量大于右括号数量</p>
<p>2、左右括号数量相等</p>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>next[i] :在str[1~i]中，前缀和后缀相等的最长子串的长度</p>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>1s可以算10的7次方到10的8次方次</p>
<h2 id="电脑开机过程"><a href="#电脑开机过程" class="headerlink" title="电脑开机过程"></a>电脑开机过程</h2>]]></content>
  </entry>
  <entry>
    <title>质数</title>
    <url>/2020/09/12/%E8%B4%A8%E6%95%B0/</url>
    <content><![CDATA[<h1 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在大于1的整数中，如果只包含1和本身这两个约数，就被称为质数（素数）</p>
<h3 id="质数的判定–试除法"><a href="#质数的判定–试除法" class="headerlink" title="质数的判定–试除法"></a>质数的判定–试除法</h3><p>时间复杂度O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i&lt; n; i ++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若d|n,则（n/d)|n,不妨设d &lt;= n/d,则d2 &lt;= n,则d&lt;=根号n</p>
<p>那么d只需要枚举到根号n，时间复杂度O(根号n)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; i ++) &#123;</span><br><span class="line">    <span class="comment">//注意 写法 i &lt;= sqrt(n)，每次都要执行开方函数，速度较慢</span></span><br><span class="line">    <span class="comment">//写法 i * i &lt;= n， 存在溢出风险</span></span><br><span class="line">		<span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分解质因数–试除法"><a href="#分解质因数–试除法" class="headerlink" title="分解质因数–试除法"></a>分解质因数–试除法</h3><p>从小到大枚举所有数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;<span class="comment">//如果成立，则i一定是质数；若i不是质数，则i存在小于i并且大于1的因子k，1 &lt; k &lt; i,并且n % k == 0,</span></span><br><span class="line">            <span class="comment">//易证，k在该循环前一定被筛掉了，不可能是n的因子。</span></span><br><span class="line">			<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(n%i==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				n /= i;</span><br><span class="line">				s ++;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;质因数:%d 个数:%d&quot;</span>,i,s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>n中最多只包含一个大于根号n的质因子，如果有两个，则它们的乘积会大于n，不成立</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n / i; i ++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;<span class="comment">//如果成立，则i一定是质数；若i不是质数，则i存在小于i并且大于1的因子k，1 &lt; k &lt; i,并且n % k == 0,</span></span><br><span class="line">            <span class="comment">//易证，k在该循环前一定被筛掉了，不可能是n的因子。</span></span><br><span class="line">			<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(n%i==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				n /= i;</span><br><span class="line">				s ++;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;质因数:%d 个数:%d\n&quot;</span>,i,s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(n &gt; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;质因数:%d 个数:%d\n&quot;</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>宠物小精灵对战系统文档</title>
    <url>/2020/11/10/%E5%AE%A0%E7%89%A9%E5%B0%8F%E7%B2%BE%E7%81%B5%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="宠物小精灵对战系统文档"><a href="#宠物小精灵对战系统文档" class="headerlink" title="宠物小精灵对战系统文档"></a>宠物小精灵对战系统文档</h1><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p><strong>题目一：宠物小精灵的加入</strong></p>
<blockquote>
<p>要求：</p>
<p>设计宠物小精灵的类，为简化游戏设计，精灵的属性包括种类（力量型：高攻击； 肉盾型：高生命值； 防御型：高防御； 敏捷型：低攻击间隔，共四种）、名字、等级、经验值、攻击力、防御力、生命值、攻击间隔等（以上属性必须，其他属性可自行添加）（基本要求：本游戏中只有上面的4种类型。 进一步要求：上述4种类型可以进一步深入划分，比如力量型又可以再细分为：沙瓦朗、火爆猴、腕力等）</p>
<p>每个精灵初始等级为1，满级15级，每当精灵升级的时候，宠物对应的属性值会有少量增加（主属性增加量相对较多）</p>
<p>每个精灵有自己独特的攻击方式，如“闪电攻击”，“火焰攻击”等等，请设计一个精灵的基类，并将精灵的攻击方法设为虚方法以方便子类重写</p>
<p>请写一个测试程序对设计的精灵类的相关属性和方法（包括攻击函数，升级函数等）进行测试</p>
<p>题目主要考察点：类的继承，对象数据成员设计，成员函数设计 </p>
</blockquote>
<p><strong>题目二：用户注册与平台登录</strong></p>
<blockquote>
<p>要求：</p>
<p>每个用户需要注册一个账号，用户名全局唯一，不能有任何两个用户名相同，要考虑注册失败的场景时的反馈</p>
<p>实现注册、登录、登出功能，均采用C/S模式，客户端和服务端用socket进行通信，服务端保存所有用户的信息</p>
<p>每个用户拥有：用户名、拥有的精灵，两个属性。 用户注册成功时，系统自动随机分发三个1级精灵给用户</p>
<p>用户可以查看所有成功注册用户拥有的精灵，也可以查看所有当前在线的用户</p>
<p>题目主要考察点：socket通信，交互场景反馈，用户信息存储方式，界面交互，其它合理的新颖设计。</p>
</blockquote>
<p><strong>题目三：游戏对战的设计</strong></p>
<blockquote>
<p>要求：</p>
<p>已经登录的在线用户可以和服务器进行虚拟决斗，决斗分两种：升级赛和决斗赛，两种比赛都能增长精灵宠物经验值。服务器上有一个虚拟精灵的列表，用户可以挑选其中任意一个进行比赛（升级赛或者决斗赛）。另外决斗赛中用户胜出可以直接获得该战胜的精灵，失败则系统从用户的精灵中随机选三个（不够三个精灵的情况就选择他所有的精灵），然后由用户选一个送出。</p>
<p>升级赛 只是用户用来增加精灵经验值，规则开发者自定；</p>
<p>累积多少经验值升一级，规则开发者自定；</p>
<p>决斗赛的上述规则同升级赛，只是额外还可以赢得一个宠物或失去一个宠物。</p>
<p>用户如果没有精灵（比如总是失败，已经全部送出去），则系统会随机放给他一个初级精灵。</p>
<p>请让你的系统自动模拟每场比赛的每次出招。另外，为了增加不确定性，可以加入概率闪避攻击和暴击伤害机制</p>
<p>比赛的过程和结果由系统根据上述规则自动模拟完成，要求结果具有一定的随机性。</p>
<p>用户增加新功能，可以查看某个用户的胜率</p>
<p>用户增加新属性，为宠物个数徽章（金银铜）和高级宠物徽章（金银铜），分别根据拥有的宠物个数的多少和拥有高级宠物（15级）个数的多少颁发</p>
<p>题目主要考察点：客户端与服务器数据交互（可采用多进程或异步通信或其他方法均可），并发请求处理，类的方法设计，伤害计算方法设计，界面交互，其它合理的新颖设计。</p>
</blockquote>
<p><strong>软件设计要求</strong></p>
<blockquote>
<p>如有必要的友元函数，要在报告（课程设计报告）和程序中说明每个友元函数的不可替代性，为什么一定要用友元才能实现。</p>
<p>自己编写的代码，除主函数和必要的友元函数外，不允许出现任何一个非类成员函数。</p>
<p>任何不改变对象状态（不改写自身对象数据成员值）的成员函数均需显式标注const。</p>
</blockquote>
<p><strong>代码规范性要求</strong></p>
<blockquote>
<p>代码需遵循课件提出的编码规范要求。</p>
<p>通过开发环境自动生成的界面类代码，全部数据成员和成员函数需在类声明时加以注释，函数体内的必要步骤要加以注释。</p>
<p>其他全部类代码的数据成员和成员函数的声明和实现均需加以注释，成员函数的必要步骤要加以注释。</p>
</blockquote>
<h2 id="二、类的设计"><a href="#二、类的设计" class="headerlink" title="二、类的设计"></a>二、类的设计</h2><h3 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h3><p>首先设计精灵的基类，所有精灵都有具备这些属性以及函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pet_base_class</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> name;<span class="comment">//宠物名字</span></span><br><span class="line">    pet_type type;<span class="comment">//宠物类别</span></span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//宠物身份唯一标识</span></span><br><span class="line">    <span class="keyword">int</span> atk;<span class="comment">//攻击值</span></span><br><span class="line">    <span class="keyword">int</span> def;<span class="comment">//防御值</span></span><br><span class="line">    <span class="keyword">int</span> hp;<span class="comment">//总血量</span></span><br><span class="line">    <span class="keyword">int</span> speed;<span class="comment">//闪避速度</span></span><br><span class="line">    <span class="keyword">int</span> crit_rate;<span class="comment">//暴击率</span></span><br><span class="line">    <span class="keyword">int</span> remaining_hp;<span class="comment">//当前血量</span></span><br><span class="line">    pet_status status;<span class="comment">//宠物当前状态</span></span><br><span class="line">    <span class="keyword">int</span> remaining_chaos_time;<span class="comment">//状态异常剩余时间</span></span><br><span class="line">    <span class="comment">//string skill_name[4];//普通攻击和三种技能</span></span><br><span class="line">    <span class="comment">//string skill_description[4];</span></span><br><span class="line">    <span class="comment">//int skill_pp[3];//普通攻击pp为无限</span></span><br><span class="line">    <span class="keyword">int</span> level;<span class="comment">//宠物等级</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>;<span class="comment">//总的经验值</span></span><br><span class="line">    <span class="keyword">int</span> attack_interval;<span class="comment">//攻击间隔,先只弄一个技能，后续再添加,20/9/1 考虑攻击间隔为出招速度，在对战开始时，出招速度</span></span><br><span class="line">    <span class="comment">//快的宠物优先出招，只需要在战斗开始时判断一下谁的出招速度快就可以了</span></span><br><span class="line">    <span class="keyword">int</span> total_pp;<span class="comment">//只有一个技能</span></span><br><span class="line">    <span class="built_in">string</span> skill_name;</span><br><span class="line">    <span class="keyword">int</span> remaining_pp;<span class="comment">//剩余技能使用次数，目前只有普通攻击，以后再考虑,2020/9/1考虑添加技能pp</span></span><br><span class="line">    <span class="keyword">int</span> exp_need[<span class="number">14</span>];<span class="comment">//每升一级需要的经验，英雄初始为一级，2-15；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> atk_debuff;<span class="comment">//被干扰后的攻击力</span></span><br><span class="line">    <span class="keyword">int</span> def_debuff;<span class="comment">//被干扰后的防御力</span></span><br><span class="line">    <span class="keyword">int</span> speed_debuff;<span class="comment">//被干扰后的闪避速度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    pet_base_class(pet_type);</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">get_name</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;<span class="comment">//获得宠物名字</span></span><br><span class="line">    <span class="function">pet_type <span class="title">get_type</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> type; &#125;<span class="comment">//获得宠物类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;<span class="comment">//获得宠物id，唯一标识</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_atk</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> atk; &#125;<span class="comment">//获得宠物攻击值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_def</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> def; &#125;<span class="comment">//获得宠物防御值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_hp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> hp; &#125;<span class="comment">//获得宠物总血量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_speed</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> speed; &#125;<span class="comment">//获得宠物攻速</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_crit_rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> crit_rate; &#125;<span class="comment">//获得宠物暴击率</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_remaining_hp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> remaining_hp; &#125;<span class="comment">//获得宠物当前血量</span></span><br><span class="line">    <span class="function">pet_status <span class="title">get_status</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> status; &#125;<span class="comment">//获得宠物当前状态</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_remaining_chaos_time</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> remaining_chaos_time;&#125;<span class="comment">//获得宠物异常状态剩余时间</span></span><br><span class="line">    <span class="comment">//string* get_skill_name() &#123; return skill_name; &#125;;//获得技能名字</span></span><br><span class="line">    <span class="comment">//string* get_skill_description() &#123; return skill_description; &#125;;//获得技能描述</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_pp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> total_pp; &#125;<span class="comment">//获得技能总pp</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_remaining_pp</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> remaining_pp;&#125;<span class="comment">//获得技能剩余pp</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_level</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> level; &#125;<span class="comment">//获得宠物等级</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_exp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">exp</span>; &#125;<span class="comment">//获得宠物总经验值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_attack_interval</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> attack_interval; &#125;<span class="comment">//获得宠物攻击间隔</span></span><br><span class="line">    <span class="comment">//int* get_remaining_pp() &#123; return remaining_pp; &#125;;//获得技能剩余次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_atk_debuff</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> atk_debuff;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_def_debuff</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> def_debuff;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_speed_debuff</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> speed_debuff;&#125;</span><br><span class="line">    <span class="function">bullet* <span class="title">normal_attack</span><span class="params">(<span class="keyword">int</span>&amp;)</span></span>;<span class="comment">//普通攻击,返回攻击对象的指针，将其传入对方的unde_attack函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">under_attack</span><span class="params">(bullet*,<span class="keyword">int</span>&amp;)</span></span>;<span class="comment">//受到攻击,返回true说明战斗失败，接收攻击方的攻击信息</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> bullet* <span class="title">skill</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//使用技能,纯虚函数，使用方法与normal_attack类似</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;<span class="comment">//输出精灵信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_exp</span><span class="params">(<span class="keyword">int</span>)</span></span>;<span class="comment">//获取经验值,每次执行完该函数就要执行level_up_exp（）；</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">level_up_exp</span><span class="params">()</span></span>;<span class="comment">//通用升级函数，当exp经验值到了，会自动升一级，函数有潜在的问题，没有考虑一下子升多级的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deal_chaos</span><span class="params">()</span></span>;<span class="comment">//处理异常状态函数,每次受到技能攻击后执行该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chaos_recover</span><span class="params">()</span></span>;<span class="comment">//当宠物战败时，用于恢复到原来的状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">level_up_attribute</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//将自身属性升级，在level_up_exp（）中被调用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">get_status_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (status)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> normal:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;normal&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> critical:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;critical&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> dizz:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;dizz&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> attack_debased:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;attack_debased&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> defence_debased:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;defence_debased&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> speed_debased:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;speed_debased&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>枚举类型，pet_type表示宠物类型，pet_status表示宠物的状态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> pet_type</span><br><span class="line">&#123;</span><br><span class="line">    ATK, <span class="comment">//high attack</span></span><br><span class="line">    HP,	<span class="comment">//high HP</span></span><br><span class="line">    DEF, <span class="comment">//high defence</span></span><br><span class="line">    SPE	<span class="comment">//high speed</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">enum</span> pet_status</span><br><span class="line">&#123;</span><br><span class="line">    normal,<span class="comment">//正常</span></span><br><span class="line">    critical,<span class="comment">//暴击</span></span><br><span class="line">    dizz,<span class="comment">//眩晕，无法释放技能</span></span><br><span class="line">    attack_debased,<span class="comment">//攻击力被降低</span></span><br><span class="line">    defence_debased,<span class="comment">//防御值被降低</span></span><br><span class="line">    speed_debased<span class="comment">//闪避速度被降低</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>攻击类的设计，每当宠物使用技能时，就会将攻击的信息传入bullet中，由对方的宠物接收该bullet，进行血量以及状态的修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bullet</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bullet();</span><br><span class="line">    bullet(<span class="keyword">const</span> bullet&amp;);</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> bullet&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> damage;<span class="comment">//基础伤害</span></span><br><span class="line">    pet_status status;<span class="comment">//该技能会对对方造成的debuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>设计不同属性的精灵，完成升级函数的设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Speed</span> :</span> <span class="keyword">public</span> pet_base_class</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Speed() :pet_base_class(SPE) &#123;&#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">level_up_attribute</span><span class="params">()</span></span>;<span class="comment">//升级属性</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attack</span> :</span><span class="keyword">public</span> pet_base_class</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Attack() :pet_base_class(ATK) &#123;&#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">level_up_attribute</span><span class="params">()</span></span>;<span class="comment">//升级属性</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Defence</span> :</span><span class="keyword">public</span> pet_base_class</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Defence() :pet_base_class(DEF) &#123;&#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">level_up_attribute</span><span class="params">()</span></span>;<span class="comment">//升级属性</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> :</span><span class="keyword">public</span> pet_base_class</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Tank() :pet_base_class(HP) &#123;&#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">level_up_attribute</span><span class="params">()</span></span>;<span class="comment">//升级属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>具体精灵的实现，设计每个精灵独有的攻击属性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//皮卡丘</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pikachu</span> :</span> <span class="keyword">public</span> Speed</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Pikachu(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火球鼠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cyndaquil</span> :</span> <span class="keyword">public</span> Speed</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Cyndaquil(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//烈焰猴</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Infernape</span> :</span> <span class="keyword">public</span> Attack</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Infernape(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//喷火龙</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Charizard</span> :</span> <span class="keyword">public</span> Attack</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Charizard(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//妙蛙种子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bulbasaur</span> :</span> <span class="keyword">public</span> Defence</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Bulbasaur(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//卡比兽</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snorlax</span> :</span> <span class="keyword">public</span> Defence</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Snorlax(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//杰尼龟</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squirtle</span> :</span> <span class="keyword">public</span> Tank</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Squirtle(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//独角虫</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weedle</span> :</span> <span class="keyword">public</span> Tank</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">bullet* <span class="title">skill</span><span class="params">()</span></span>;</span><br><span class="line">    Weedle(<span class="keyword">int</span>,<span class="keyword">int</span>);<span class="comment">//生成相应等级的宠物</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><p>用户的注册和登录，使用socket进行通信，分为客户端和服务器端</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>用户类的设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    user();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">string</span> user_name;</span><br><span class="line">    <span class="built_in">string</span> user_password;</span><br><span class="line">    <span class="keyword">int</span> win_session;<span class="comment">//胜场</span></span><br><span class="line">    <span class="keyword">int</span> total_session;<span class="comment">//总场</span></span><br><span class="line">    <span class="keyword">int</span> senior_pet_medal;<span class="comment">//高级精灵奖章:15级精灵个数</span></span><br><span class="line">    <span class="keyword">int</span> number_pet_medal;<span class="comment">//精灵个数奖章:精灵个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>登录窗口设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login_widget</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login_widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">login_widget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~login_widget();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::login_widget *ui;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="built_in">string</span>, <span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_login_button</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_regist_button</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_exit_button</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_regist_in_regist</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_return_to_login</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">warning</span><span class="params">(QString warn)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>网络层 接收端设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	SOCKET sock;<span class="comment">//创建套接字</span></span><br><span class="line">    <span class="comment">//const int PORT = 8000;</span></span><br><span class="line">	<span class="comment">//char buf[1024];//用于接收信息</span></span><br><span class="line">    sockaddr_in servAddr;<span class="comment">//服务端地址</span></span><br><span class="line">    sockaddr fromAddr;</span><br><span class="line">    QString username;</span><br><span class="line">    <span class="comment">//struct sockaddr clntAddr;//客户端地址</span></span><br><span class="line">	<span class="comment">//Pikachu* pet;//定义了一只宠物</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	server();</span><br><span class="line">    ~server();</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">login_success</span><span class="params">(QString)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">warning</span><span class="params">(QString)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_user</span><span class="params">(user&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_pet_backpack</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_user_info</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_user_status</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive_pet_information</span><span class="params">(<span class="built_in">string</span>&amp;)</span></span>;<span class="comment">//接收宠物信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_choose_defeat_pet</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_user_medal</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password)</span></span>;<span class="comment">//发送登录请求</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password)</span></span>;<span class="comment">//发送注册信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_all_user_information</span><span class="params">()</span></span>;<span class="comment">//获得所有用户信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_all_user_status</span><span class="params">()</span></span>;<span class="comment">//获得所有用户在线状态</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_user_pet_information</span><span class="params">(<span class="built_in">string</span> username)</span></span>;<span class="comment">//获得某个用户的精灵信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">logout</span><span class="params">(<span class="built_in">string</span> username)</span></span>;<span class="comment">//退出登录</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update_user_pet_information</span><span class="params">(pet_base_class&amp; pet,<span class="built_in">string</span> username)</span></span>;<span class="comment">//更新某用户的精灵信息 </span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update_user_information</span><span class="params">(user&amp; u)</span></span>;<span class="comment">//更新用户信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete_user_pet</span><span class="params">(<span class="keyword">int</span> id)</span></span>;<span class="comment">//删除某个精灵信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_server_pet_information</span><span class="params">()</span></span>;<span class="comment">//获得服务器精灵信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_1_level_pet</span><span class="params">(<span class="built_in">string</span> username)</span></span>;<span class="comment">//获得一个初始精灵</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_myuser</span><span class="params">()</span></span>;<span class="comment">//get user information</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_user_pet_through_id</span><span class="params">(<span class="keyword">int</span> id)</span></span>;<span class="comment">//根据宠物id获取宠物的详细信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_pet</span><span class="params">(pet_base_class&amp;,<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_random_3_pet</span><span class="params">(<span class="built_in">string</span>)</span></span>;<span class="comment">//决斗赛失败，用户随机失去一个精灵</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query_number_pet_and_15_number_pet</span><span class="params">(<span class="built_in">string</span>)</span></span>;<span class="comment">//查询用户宠物个数，15级宠物个数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>展示用户信息的窗口</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user_info_widget</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user_info_widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">user_info_widget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~user_info_widget();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_user_info_widget</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::user_info_widget *ui;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_user_info</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_others_pet_backpack</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_user_info</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_user_status</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_my_item</span><span class="params">(QTableWidgetItem*)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><p>数据库的设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">database</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	sqlite3* db;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	database();</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">insert_user</span><span class="params">(user&amp;)</span></span>;<span class="comment">//插入用户</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">query_user</span><span class="params">(<span class="built_in">string</span> user_name, user&amp;)</span></span>;<span class="comment">//根据用户名查询用户,查询的结果保存在user类中</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">update_user</span><span class="params">(user&amp;)</span></span>;<span class="comment">//更新用户信息</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">get_user_list</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp;)</span></span>;<span class="comment">//获得用户信息列表</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">get_pet_list</span><span class="params">(<span class="built_in">string</span> user_name, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp;)</span></span>;<span class="comment">//获取某用户的精灵信息,第一个参数为精灵名</span></span><br><span class="line">	<span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; user_online_status;<span class="comment">//每当注册一个用户，就把用户名放进来 &lt;用户名，状态&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update_num_of_pet</span><span class="params">()</span></span>;<span class="comment">//每当精灵数改变时，就执行该函数，更新精灵数量</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_pet_number</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>&amp; uname)</span></span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">insert_pet</span><span class="params">(pet&amp;)</span></span>;<span class="comment">//插入精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">update_pet</span><span class="params">(pet&amp;)</span></span>;<span class="comment">//更新精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">delete_pet</span><span class="params">(<span class="built_in">string</span>&amp;)</span></span>;<span class="comment">//删除精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">query_pet</span><span class="params">(<span class="keyword">int</span> id, pet&amp;)</span></span>;<span class="comment">//根据id查询精灵</span></span><br><span class="line">	<span class="keyword">int</span> num_of_pet;<span class="comment">//计数，当前数据库有多少条记录，就是宠物的id，唯一身份标识</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>网络层 发送端设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	SOCKET sock;<span class="comment">//创建套接字</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> PORT = <span class="number">8000</span>;</span><br><span class="line">	<span class="comment">//char buf[1024];//用于接收信息</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servAddr</span>;</span><span class="comment">//服务端地址</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clntAddr</span>;</span><span class="comment">//客户端地址</span></span><br><span class="line">	database* my_database;</span><br><span class="line">	<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; itos_pet;<span class="comment">//8个精灵精灵名字和序号对照表，用于随机选取数字</span></span><br><span class="line">	<span class="keyword">int</span> pet_id;<span class="comment">//服务器有16个精灵，id为1-16.每当分发新精灵时，id要加一。</span></span><br><span class="line">	<span class="comment">//注意：每当启动服务器时要计算出当前宠物个数，初始化pet_id和user_online_status,暂时未做，要放在构造函数中初始化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	server();</span><br><span class="line">	~server() &#123; <span class="keyword">delete</span> my_database; &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">deal_login</span><span class="params">(<span class="built_in">string</span> username,<span class="built_in">string</span> password)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">deal_regist</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deal_logout</span><span class="params">(<span class="built_in">string</span> username)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">send_all_user_status</span><span class="params">()</span></span>;<span class="comment">//发送所有用户的在线状态信息、</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">send_all_user_information</span><span class="params">()</span></span>;<span class="comment">//发送所有用户的信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">send_user_pet_infomation</span><span class="params">(<span class="built_in">string</span> username)</span></span>;<span class="comment">//发送某用户拥有的精灵信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">send_server_pet_information</span><span class="params">()</span></span>;<span class="comment">//发送服务器精灵信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">new_1_level_pet</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> pet_name)</span></span>;<span class="comment">//给用户分发一个1级精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update_user_pet_information</span><span class="params">(pet&amp;)</span></span>;<span class="comment">//更新用户精灵的信息，这里输入暂定为一个精灵对象</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete_user_pet</span><span class="params">(<span class="built_in">string</span>&amp;)</span></span>;<span class="comment">//删除用户的一个精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update_user_information</span><span class="params">(user&amp;)</span></span>;<span class="comment">//更新用户信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">send_user_information</span><span class="params">(<span class="built_in">string</span> username)</span></span>;<span class="comment">//发送用户信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">send_user_pet_through_id</span><span class="params">(<span class="keyword">int</span> id)</span></span>;<span class="comment">//通过id发送精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_pet_when_win</span><span class="params">(pet&amp;)</span></span>;<span class="comment">//决斗赛胜利了，那么获得对手的精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_random_3_pet</span><span class="params">(<span class="built_in">string</span> username)</span></span>;<span class="comment">//随机获得三个精灵</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">get_pet_number</span><span class="params">(<span class="built_in">string</span> uname)</span></span>;<span class="comment">//查询宠物个数和15级宠物个数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>;<span class="comment">//从客户端收到的信息</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>用户类设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    user();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">string</span> user_name;</span><br><span class="line">    <span class="built_in">string</span> user_password;</span><br><span class="line">    <span class="keyword">int</span> win_session;<span class="comment">//胜场</span></span><br><span class="line">    <span class="keyword">int</span> total_session;<span class="comment">//总场</span></span><br><span class="line">    <span class="keyword">int</span> senior_pet_medal;<span class="comment">//高级精灵奖章:15级精灵个数</span></span><br><span class="line">    <span class="keyword">int</span> number_pet_medal;<span class="comment">//精灵个数奖章:精灵个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h3><p>选择精灵场景</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">choose_pet_widget</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">choose_pet_widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">choose_pet_widget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~choose_pet_widget();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_choose_pet_widget</span><span class="params">()</span></span>;</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_choose_pet</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start_battle</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::choose_pet_widget *ui;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_choose_pet_backpack</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_pet_1</span><span class="params">(QTableWidgetItem*)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_pet_2</span><span class="params">(QTableWidgetItem*)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_start_button</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_promotion_competition</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_duels_competition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对战场景</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">battle_widget</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">battle_widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">battle_widget</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~battle_widget();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">battle</span><span class="params">(pet_base_class&amp; a,pet_base_class&amp; b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::battle_widget *ui;</span><br><span class="line">    pet_base_class * user_pet;</span><br><span class="line">    pet_base_class * server_pet;</span><br><span class="line">    <span class="keyword">int</span> battle_style;<span class="comment">//1为升级赛，2为决斗赛</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_two_pet</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_after_battle</span><span class="params">(<span class="keyword">bool</span> is_win,<span class="built_in">string</span> server_pet_name,<span class="keyword">int</span> server_pet_level,<span class="keyword">int</span> battle_s,<span class="keyword">int</span> user_pet_id)</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_battle_ground</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_normal_attack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_skill</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">click_quit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>主界面的设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closeEvent</span><span class="params">(QCloseEvent *)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">    login_widget *login_window;</span><br><span class="line">    pet_backpack *pet_backpack_window;</span><br><span class="line">    user_info_widget * user_info_window;</span><br><span class="line">    choose_pet_widget * choose_pet_window;</span><br><span class="line">    battle_widget * battle_window;</span><br><span class="line">    server * myserver;</span><br><span class="line">    user* myuser;</span><br><span class="line">    <span class="comment">//battle_controller * battle;</span></span><br><span class="line">    pet_base_class * mypet;</span><br><span class="line">    <span class="built_in">string</span> save_user_pet_information;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(QString)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_user</span><span class="params">(user&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_MainWindow</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_pet_backpack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_pet_backpack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_others_pet_backpack</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="comment">//void exit_others_pet_backpack();</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_user_info_window</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_user_info_window</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_choose_pet_window</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit_choose_pet_window</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start_battle</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_two_pet</span><span class="params">(<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>,<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update_after_battle</span><span class="params">(<span class="keyword">bool</span> is_win,<span class="built_in">string</span> server_pet_name,<span class="keyword">int</span> server_pet_level,<span class="keyword">int</span> battle_s,<span class="keyword">int</span> user_pet_id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive_pet_information</span><span class="params">(<span class="built_in">string</span>&amp;)</span></span>;<span class="comment">//接收宠物信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_choose_defeat_pet</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh_user_medal</span><span class="params">(<span class="built_in">string</span>)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><h3 id="题目一-1"><a href="#题目一-1" class="headerlink" title="题目一"></a>题目一</h3><h4 id="1、精灵的构造"><a href="#1、精灵的构造" class="headerlink" title="1、精灵的构造"></a>1、精灵的构造</h4><p>每个精灵都会在自己的父类上进行构造。基类的构造函数初始化所有精灵的通用属性，属性类的构造函数初始化精灵的升级函数，具体的精灵类则实现该精灵特有的攻击函数，下面以Cyndaquil为例</p>
<p>基类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pet_base_class::pet_base_class(pet_type t)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;type = t;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk = <span class="number">50</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;hp = <span class="number">500</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;speed = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;crit_rate = <span class="number">0</span>;<span class="comment">//初始暴击率为0%</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">this</span>-&gt;status = normal;</span><br><span class="line">	<span class="keyword">this</span>-&gt;level = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;attack_interval = <span class="number">2000</span>;<span class="comment">//2000毫秒</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_chaos_time = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Speed::level_up_attribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk += <span class="keyword">this</span>-&gt;level / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk_debuff += <span class="keyword">this</span>-&gt;level / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def += <span class="keyword">this</span>-&gt;level / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def_debuff += <span class="keyword">this</span>-&gt;level / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;hp += <span class="keyword">this</span>-&gt;level;</span><br><span class="line">	<span class="keyword">this</span>-&gt;speed += <span class="keyword">this</span>-&gt;level / <span class="number">4</span>;<span class="comment">//speed应该是闪避速度，攻击间隔才是攻击速度</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;speed_debuff += <span class="keyword">this</span>-&gt;level / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;crit_rate += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;attack_interval -= <span class="number">50</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk_debuff = <span class="keyword">this</span>-&gt;atk;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def_debuff = <span class="keyword">this</span>-&gt;def;</span><br><span class="line">	<span class="keyword">this</span>-&gt;speed_debuff = <span class="keyword">this</span>-&gt;speed;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_hp = <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_pp = <span class="keyword">this</span>-&gt;total_pp;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>精灵类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//火球鼠</span></span><br><span class="line">Cyndaquil::Cyndaquil(<span class="keyword">int</span> level,<span class="keyword">int</span> _id)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;name = <span class="string">&quot;Cyndaquil&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;type = SPE;</span><br><span class="line">    <span class="keyword">this</span>-&gt;id = _id;</span><br><span class="line">    <span class="keyword">this</span>-&gt;total_pp = <span class="number">8</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_pp = <span class="keyword">this</span>-&gt;total_pp;</span><br><span class="line">	<span class="keyword">this</span>-&gt;skill_name = <span class="string">&quot;Cyndaquil_skill&quot;</span>;</span><br><span class="line">	<span class="comment">//this-&gt;level = level;</span></span><br><span class="line">	<span class="keyword">if</span> (level &lt; <span class="number">2</span>) <span class="keyword">this</span>-&gt;<span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">this</span>-&gt;<span class="built_in">exp</span> = <span class="keyword">this</span>-&gt;exp_need[level - <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; level; i++) <span class="keyword">this</span>-&gt;level_up_exp();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bullet* <span class="title">Cyndaquil::skill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_pp--;</span><br><span class="line">	bullet* attack = <span class="keyword">new</span> bullet;</span><br><span class="line">	attack-&gt;damage = <span class="keyword">this</span>-&gt;atk_debuff * <span class="keyword">this</span>-&gt;level / <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> p = rand() % <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">if</span> (p &lt; <span class="number">40</span>)<span class="comment">//有40%的几率降低对方防御</span></span><br><span class="line">	&#123;</span><br><span class="line">		attack-&gt;status = defence_debased;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		attack-&gt;status = normal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;get_name() &lt;&lt; <span class="string">&quot; use skill_attack, damage = &quot;</span> &lt;&lt; attack-&gt;damage &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> attack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、精灵攻击方式"><a href="#2、精灵攻击方式" class="headerlink" title="2、精灵攻击方式"></a>2、精灵攻击方式</h4><h5 id="普通攻击"><a href="#普通攻击" class="headerlink" title="普通攻击"></a>普通攻击</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">bullet* <span class="title">pet_base_class::normal_attack</span><span class="params">(<span class="keyword">int</span> &amp; i)</span><span class="comment">//普通攻击暴击i为1，不暴击为0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bullet* attack = <span class="keyword">new</span> bullet;</span><br><span class="line">	attack-&gt;status = normal;</span><br><span class="line">    attack-&gt;damage = <span class="keyword">this</span>-&gt;atk_debuff * <span class="keyword">this</span>-&gt;level / <span class="number">3</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;normal attack damage &quot; &lt;&lt; attack-&gt;damage;</span></span><br><span class="line">	<span class="keyword">int</span> p = rand() % <span class="number">100</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (p &lt;= <span class="keyword">this</span>-&gt;crit_rate)<span class="comment">//普通攻击如果暴击</span></span><br><span class="line">	&#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">		attack-&gt;status = critical;</span><br><span class="line">        <span class="keyword">if</span>(attack-&gt;damage != <span class="number">0</span>)</span><br><span class="line">            attack-&gt;damage += <span class="number">10</span> * <span class="keyword">this</span>-&gt;level;<span class="comment">//伤害增加</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;critical!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;get_name() &lt;&lt;<span class="string">&quot; use normal_attack, damage = &quot;</span> &lt;&lt; attack-&gt;damage &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> attack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>普通攻击造成一定的伤害，并且有一定几率暴击，暴击的效果和精灵的当前等级有关</p>
<h5 id="技能攻击"><a href="#技能攻击" class="headerlink" title="技能攻击"></a>技能攻击</h5><p>不同精灵的技能有不同的攻击属性，下面以Pikachu为例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">bullet* <span class="title">Pikachu::skill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_pp--;</span><br><span class="line">	bullet* attack = <span class="keyword">new</span> bullet;</span><br><span class="line">	attack-&gt;damage = <span class="keyword">this</span>-&gt;atk_debuff * <span class="keyword">this</span>-&gt;level / <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">int</span> p = rand() % <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">if</span> (p &lt; <span class="number">30</span>)<span class="comment">//有30%的几率降低对方攻击力</span></span><br><span class="line">	&#123;</span><br><span class="line">		attack-&gt;status = attack_debased;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		attack-&gt;status = normal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;get_name() &lt;&lt; <span class="string">&quot; use skill_attack, damage = &quot;</span> &lt;&lt; attack-&gt;damage &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> attack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>技能攻击会造成一定伤害，并且有一定几率使对手陷入异常状态，异常状态包括攻击力下降，防御力下降，闪避速度下降，眩晕</p>
<h5 id="受到伤害"><a href="#受到伤害" class="headerlink" title="受到伤害"></a>受到伤害</h5><p>精灵使用技能后，计算出该技能的伤害和异常状态，返回值传入bullet类中，然后对手精灵接收该bullet类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pet_base_class::under_attack</span><span class="params">(bullet* attack,<span class="keyword">int</span>&amp; i)</span><span class="comment">//被攻击精灵 的 状态</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> damage;</span><br><span class="line">	<span class="keyword">int</span> p = rand() % <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">if</span> (p &lt; <span class="keyword">this</span>-&gt;speed_debuff)<span class="comment">//如果闪避</span></span><br><span class="line">	&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">		damage = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sidestep&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	damage = attack-&gt;damage - <span class="keyword">this</span>-&gt;def_debuff * <span class="keyword">this</span>-&gt;level / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">if</span> (damage &lt; <span class="number">0</span>) damage = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;get_name() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">switch</span> (attack-&gt;status)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> normal:</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;under normal attack&quot;</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//受到了普通攻击效果，可能是普通攻击或者技能攻击</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> critical:</span><br><span class="line">        i =<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;under critical normal attack&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> dizz:</span><br><span class="line">        i=<span class="number">3</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;under dizz&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> attack_debased:</span><br><span class="line">        i=<span class="number">4</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;under attack_debased&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> defence_debased:</span><br><span class="line">        i=<span class="number">5</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;under defence_debased&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> speed_debased:</span><br><span class="line">        i=<span class="number">6</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;under speed_debased&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;get_name() &lt;&lt; <span class="string">&quot; takes damage: &quot;</span> &lt;&lt; damage &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;remaining_chaos_time == <span class="number">0</span> || attack-&gt;status != normal)<span class="comment">//如果不处于异常状态</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;status = attack-&gt;status;<span class="comment">//被攻击 获得debuff</span></span><br><span class="line">	<span class="keyword">if</span> (attack-&gt;status != normal &amp;&amp; attack-&gt;status != critical)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;remaining_chaos_time = <span class="number">2</span>;<span class="comment">//默认会debuff两个回合</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (damage &gt;= <span class="keyword">this</span>-&gt;remaining_hp)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>-&gt;remaining_hp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//血量为0，返回true，战斗失败</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;remaining_hp -= damage;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;get_name() &lt;&lt; <span class="string">&quot; hp is : &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;remaining_hp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="异常状态处理"><a href="#异常状态处理" class="headerlink" title="异常状态处理"></a>异常状态处理</h5><p>异常状态会持续两个回合</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pet_base_class::deal_chaos</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (remaining_chaos_time == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;atk_debuff = <span class="keyword">this</span>-&gt;atk;</span><br><span class="line">		<span class="keyword">this</span>-&gt;def_debuff = <span class="keyword">this</span>-&gt;def;</span><br><span class="line">		<span class="keyword">this</span>-&gt;speed_debuff = <span class="keyword">this</span>-&gt;speed;</span><br><span class="line">		<span class="keyword">this</span>-&gt;status = normal;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (<span class="keyword">this</span>-&gt;status)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> dizz:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;status:dizz  &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;atk_debuff = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> attack_debased:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;status:attack_debased&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;atk_debuff = <span class="keyword">this</span>-&gt;atk - <span class="number">2</span> * <span class="keyword">this</span>-&gt;level;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> defence_debased:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;status:defence_debased&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;def_debuff = <span class="keyword">this</span>-&gt;def - <span class="number">2</span> * <span class="keyword">this</span>-&gt;level;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> speed_debased:</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;status:speed_debased&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;speed_debuff = <span class="keyword">this</span>-&gt;speed - <span class="number">2</span> * <span class="keyword">this</span>-&gt;level;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;remaining_chaos_time &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">this</span>-&gt;remaining_chaos_time--;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pet_base_class::chaos_recover</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;status = normal;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_chaos_time = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk_debuff = <span class="keyword">this</span>-&gt;atk;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def_debuff = <span class="keyword">this</span>-&gt;def;</span><br><span class="line">	<span class="keyword">this</span>-&gt;speed_debuff = <span class="keyword">this</span>-&gt;speed;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_hp = <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_pp = <span class="keyword">this</span>-&gt;remaining_pp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="升级函数"><a href="#升级函数" class="headerlink" title="升级函数"></a>升级函数</h5><p>每种属性的精灵有着不同的升级函数，当经验累积到一定程度，就会自动升级</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Speed::level_up_attribute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk += <span class="keyword">this</span>-&gt;level / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk_debuff += <span class="keyword">this</span>-&gt;level / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def += <span class="keyword">this</span>-&gt;level / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def_debuff += <span class="keyword">this</span>-&gt;level / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;hp += <span class="keyword">this</span>-&gt;level;</span><br><span class="line">	<span class="keyword">this</span>-&gt;speed += <span class="keyword">this</span>-&gt;level / <span class="number">4</span>;<span class="comment">//speed应该是闪避速度，攻击间隔才是攻击速度</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;speed_debuff += <span class="keyword">this</span>-&gt;level / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;crit_rate += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;attack_interval -= <span class="number">50</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;atk_debuff = <span class="keyword">this</span>-&gt;atk;</span><br><span class="line">	<span class="keyword">this</span>-&gt;def_debuff = <span class="keyword">this</span>-&gt;def;</span><br><span class="line">	<span class="keyword">this</span>-&gt;speed_debuff = <span class="keyword">this</span>-&gt;speed;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_hp = <span class="keyword">this</span>-&gt;hp;</span><br><span class="line">	<span class="keyword">this</span>-&gt;remaining_pp = <span class="keyword">this</span>-&gt;total_pp;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="题目二-1"><a href="#题目二-1" class="headerlink" title="题目二"></a>题目二</h3><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">server::server()</span><br><span class="line">&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定套接字</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;servAddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servAddr));  <span class="comment">//每个字节都用0填充</span></span><br><span class="line">    servAddr.sin_family = PF_INET;  <span class="comment">//使用IPv4地址</span></span><br><span class="line">    servAddr.sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    servAddr.sin_port = htons(<span class="number">1234</span>);  <span class="comment">//端口</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="发送登录请求"><a href="#发送登录请求" class="headerlink" title="发送登录请求"></a>发送登录请求</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::login</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;username = QString::fromStdString(username);</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;1;&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += password;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span> &lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">    <span class="comment">//qDebug()&lt;&lt;WSAGetLastError();</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;receive();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="发送注册请求"><a href="#发送注册请求" class="headerlink" title="发送注册请求"></a>发送注册请求</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::regist</span><span class="params">(<span class="built_in">string</span> username, <span class="built_in">string</span> password)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;2;&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += password;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span> &lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">    <span class="keyword">this</span>-&gt;receive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获得所有用户信息"><a href="#获得所有用户信息" class="headerlink" title="获得所有用户信息"></a>获得所有用户信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::get_all_user_information</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">    <span class="keyword">this</span>-&gt;receive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取所有用户在线状态"><a href="#获取所有用户在线状态" class="headerlink" title="获取所有用户在线状态"></a>获取所有用户在线状态</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::get_all_user_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;4&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">    <span class="keyword">this</span>-&gt;receive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获得某个用户的精灵信息"><a href="#获得某个用户的精灵信息" class="headerlink" title="获得某个用户的精灵信息"></a>获得某个用户的精灵信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::get_user_pet_information</span><span class="params">(<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;5;&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">    <span class="keyword">this</span>-&gt;receive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="发送注销请求"><a href="#发送注销请求" class="headerlink" title="发送注销请求"></a>发送注销请求</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::logout</span><span class="params">(<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;6;&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="更新用户的精灵信息"><a href="#更新用户的精灵信息" class="headerlink" title="更新用户的精灵信息"></a>更新用户的精灵信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::update_user_pet_information</span><span class="params">(pet_base_class&amp; pet,<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;7;&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_id());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += pet.get_name();</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_atk());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_def());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_hp());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_crit_rate());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_speed());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_level());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_exp());</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="更新用户的信息"><a href="#更新用户的信息" class="headerlink" title="更新用户的信息"></a>更新用户的信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::update_user_information</span><span class="params">(user&amp; u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;8;&quot;</span>;</span><br><span class="line">    msg += u.user_name;</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += u.user_password;</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(u.win_session);</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(u.total_session);</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(u.senior_pet_medal);</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(u.number_pet_medal);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="删除用户宠物"><a href="#删除用户宠物" class="headerlink" title="删除用户宠物"></a>删除用户宠物</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::delete_user_pet</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;9;&quot;</span>;</span><br><span class="line">    msg += to_string(id);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获得服务器端宠物信息"><a href="#获得服务器端宠物信息" class="headerlink" title="获得服务器端宠物信息"></a>获得服务器端宠物信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::get_server_pet_information</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="随机获得一个一级的宠物"><a href="#随机获得一个一级的宠物" class="headerlink" title="随机获得一个一级的宠物"></a>随机获得一个一级的宠物</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::get_1_level_pet</span><span class="params">(<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">&quot;;;&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="插入一个宠物"><a href="#插入一个宠物" class="headerlink" title="插入一个宠物"></a>插入一个宠物</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::insert_pet</span><span class="params">(pet_base_class&amp; pet,<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;&gt;;&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_id());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += pet.get_name();</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_atk());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_def());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_hp());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_crit_rate());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_speed());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_level());</span><br><span class="line">    msg += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    msg += to_string(pet.get_exp());</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="随机获得三个宠物"><a href="#随机获得三个宠物" class="headerlink" title="随机获得三个宠物"></a>随机获得三个宠物</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::get_random_3_pet</span><span class="params">(<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> msg;</span><br><span class="line">    msg += <span class="string">&quot;?;&quot;</span>;</span><br><span class="line">    msg += username;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ch = msg.c_str();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot;clinet:&quot;</span>&lt;&lt; ch;</span><br><span class="line">    sendto(sock, ch, <span class="built_in">strlen</span>(ch), <span class="number">0</span>, (struct sockaddr*)&amp;servAddr, <span class="keyword">sizeof</span>(servAddr));</span><br><span class="line">    <span class="keyword">this</span>-&gt;receive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="接收来自服务器的信息"><a href="#接收来自服务器的信息" class="headerlink" title="接收来自服务器的信息"></a>接收来自服务器的信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::receive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> addrLen = <span class="keyword">sizeof</span>(fromAddr);</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    recvfrom(sock, buf, <span class="number">1023</span>, <span class="number">0</span>, &amp;fromAddr, &amp;addrLen);<span class="comment">//接收请求报文</span></span><br><span class="line">    <span class="comment">//if (buff_size &lt;= 0) continue;</span></span><br><span class="line">    qDebug() &lt;&lt;  <span class="string">&quot;server:&quot;</span> &lt;&lt; buf;</span><br><span class="line">    <span class="keyword">switch</span>(buf[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">//login successful</span></span><br><span class="line">        <span class="function">emit <span class="title">login_success</span><span class="params">(<span class="keyword">this</span>-&gt;username)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="function">emit <span class="title">warning</span><span class="params">(<span class="string">&quot;Wrong password!&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="function">emit <span class="title">warning</span><span class="params">(<span class="string">&quot;User does not exist!&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="function">emit <span class="title">warning</span><span class="params">(<span class="string">&quot;User already exists!&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="comment">//regist successful</span></span><br><span class="line">        <span class="function">emit <span class="title">warning</span><span class="params">(<span class="string">&quot;Regist successful! Login again please&quot;</span>)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        user* u = <span class="keyword">new</span> user;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">        u-&gt;user_name = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">        <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">        u-&gt;user_password = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">        u-&gt;win_session = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">        <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">        u-&gt;total_session = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">        <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">        u-&gt;senior_pet_medal = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">        <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">        u-&gt;number_pet_medal = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">        <span class="function">emit <span class="title">init_user</span><span class="params">(*u)</span></span>;</span><br><span class="line">        <span class="keyword">delete</span> u;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = buf;</span><br><span class="line">        <span class="function">emit <span class="title">refresh_pet_backpack</span><span class="params">(msg)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = buf;</span><br><span class="line">        <span class="function">emit <span class="title">refresh_user_info</span><span class="params">(msg)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = buf;</span><br><span class="line">        <span class="function">emit <span class="title">refresh_user_status</span><span class="params">(msg)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = buf;</span><br><span class="line">        <span class="function">emit <span class="title">receive_pet_information</span><span class="params">(msg)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = buf;</span><br><span class="line">        <span class="function">emit <span class="title">show_choose_defeat_pet</span><span class="params">(msg)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = buf;</span><br><span class="line">        <span class="function">emit <span class="title">refresh_user_medal</span><span class="params">(msg)</span></span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h4><h5 id="接收来自客户端的信息"><a href="#接收来自客户端的信息" class="headerlink" title="接收来自客户端的信息"></a>接收来自客户端的信息</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">server::receive</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">int</span> nSize = <span class="keyword">sizeof</span>(SOCKADDR);</span><br><span class="line">        <span class="keyword">int</span> buff_size = recvfrom(sock, buf, <span class="number">1023</span>, <span class="number">0</span>, (struct sockaddr*)&amp;clntAddr, &amp;nSize);<span class="comment">//接收请求报文 </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (buff_size &lt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;form ip adrress&quot;</span> &lt;&lt; ntohl(clntAddr.sin_addr.s_addr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">switch</span> (buf[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//登陆请求,buf里包含着用户名和密码，中间用，分隔     1;username,password</span></span><br><span class="line">            <span class="built_in">string</span> uname, pword;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                pword += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (deal_login(uname, pword))</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//注册请求，buf里包含着用户名和密码，中间用，分隔     2;username,password</span></span><br><span class="line">            <span class="built_in">string</span> uname, pword;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                pword += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            deal_regist(uname, pword);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取所有的用户信息   3</span></span><br><span class="line">            send_all_user_information();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获得用户在线状态   4</span></span><br><span class="line">            send_all_user_status();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获得某用户的精灵信息  5;uname</span></span><br><span class="line">            <span class="built_in">string</span> uname;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            send_user_pet_infomation(uname);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//退出登录 6;uname</span></span><br><span class="line">            <span class="built_in">string</span> uname;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            deal_logout(uname);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//更新某用户的精灵信息     7;id,username,name,atk,def,hp,crit_rate,speed,level,exp</span></span><br><span class="line">            <span class="built_in">string</span> msg;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            pet *p = <span class="keyword">new</span> pet;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;id = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;username = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;name = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;atk = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;def = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;hp = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;crit_rate = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;speed = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;level = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;<span class="built_in">exp</span> = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            update_user_pet_information(*p);</span><br><span class="line">            p-&gt;print();</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//更新用户信息     8;name,password,win,total,senior_pet_model,number_pet_medel </span></span><br><span class="line">            <span class="built_in">string</span> msg;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            user* u = <span class="keyword">new</span> user;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            u-&gt;user_name = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            u-&gt;user_password = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            u-&gt;win_session = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            u-&gt;total_session = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            u-&gt;senior_pet_medal = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            u-&gt;number_pet_medal = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            update_user_information(*u);</span><br><span class="line">            <span class="comment">//u-&gt;print();</span></span><br><span class="line">            <span class="keyword">delete</span> u;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//删除某用户的精灵信息     9;id</span></span><br><span class="line">            <span class="built_in">string</span> id;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                id += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            delete_user_pet(id);</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:   <span class="comment">//:冒号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//发送服务器精灵信息    10</span></span><br><span class="line">            send_server_pet_information();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>: <span class="comment">//;分号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//给用户一个初始精灵    ;;username</span></span><br><span class="line">            <span class="built_in">string</span> uname;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> p = rand() % <span class="number">8</span>;</span><br><span class="line">            new_1_level_pet(uname, itos_pet[p]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:<span class="comment">//&lt; 小于号 &lt;;uname</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> uname;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            send_user_information(uname);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13</span>:<span class="comment">//=等号  &lt;;id</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> id;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                id += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            send_user_pet_through_id(stoi(id));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>: <span class="comment">// &gt;大于号   插入获得的精灵  &gt;;id,username,name,atk,def,hp,crit_rate,speed,level,exp</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> msg;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            pet* p = <span class="keyword">new</span> pet;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;id = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;username = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;name = msg; msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;atk = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;def = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;hp = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;crit_rate = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;speed = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;,&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;level = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            <span class="keyword">for</span> (; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++) msg += buf[i];</span><br><span class="line">            p-&gt;<span class="built_in">exp</span> = stoi(msg); msg = <span class="string">&quot;&quot;</span>; i++;</span><br><span class="line">            get_pet_when_win(*p);</span><br><span class="line">            p-&gt;print();</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:<span class="comment">//随机三个精灵，  ?;username</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> uname;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            get_random_3_pet(uname);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:<span class="comment">//查询用户宠物个数和15级宠物个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> uname;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; buf[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                uname += buf[i];</span><br><span class="line">            &#125;</span><br><span class="line">            get_pet_number(uname);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>listen music</title>
    <url>/2020/11/10/listen-music/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-bhEgOjcF" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-bhEgOjcF"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "雨幕",
              author: "许嵩",
              url: "许嵩-雨幕-新天龙八部端游主题曲.mp3",
              pic: "",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>


        <div id="aplayer-iZbpbQTl" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-iZbpbQTl"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "Delicate",
              author: "Taylor Swift",
              url: "Taylor Swift-Delicate.mp3",
              pic: "",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>]]></content>
  </entry>
</search>
